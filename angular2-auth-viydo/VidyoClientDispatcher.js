//
//	VidyoClientDispatcher.js
//	VidyoClient
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

function VidyoClient(plugInDivId, onStatus)
{
	var contextObj = this;

	this.CreateVidyoCalendarManager = function(feedback) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			var params = VCUtils.jQuery.param({calendarMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0)});
		} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
			var params = VCUtils.jQuery.param({calendarMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0)});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoCalendarManager = new contextObj.VidyoCalendarManager(response.data.VidyoCalendarManager);	// copy construct
				objects[vidyoCalendarManager.objId] = vidyoCalendarManager;
				resolve(vidyoCalendarManager);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoCalendarManagerConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoCalendarManager = function(feedback) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarManager"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoCalendarManagerConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoCalendarManager);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoCalendarManagerDestruct?" + VCUtils.jQuery.param({ calendarMgr: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.CreateCalendarInstance = function(feedback, svcId, calendarName, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), svcId: arguments[0].svcId, calendarName: arguments[0].calendarName, createToken: arguments[0].createToken});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
				var params = VCUtils.jQuery.param({calMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0), svcId: arguments[1], calendarName: arguments[2], createToken: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerCreateCalendarInstance?" + params, OnComplete, OnError);
			});
		}

		this.DeleteCalendarInstance = function(cal) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calMgr: this.objId, cal: (arguments[0].cal ? arguments[0].cal.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({calMgr: this.objId, cal: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(cal&& response.data.cal)
						VCUtils.jQuery.extend(cal, response.data.cal);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerDeleteCalendarInstance?" + params, OnComplete, OnError);
			});
		}

		this.GetCalendarTypes = function(serviceTypes) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, serviceTypes: JSON.stringify({"serviceTypes": arguments[0].serviceTypes})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, serviceTypes: JSON.stringify({"serviceTypes": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(serviceTypes&& response.data.serviceTypes)
						VCUtils.jQuery.extend(serviceTypes, response.data.serviceTypes);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerGetCalendarTypes?" + params, OnComplete, OnError);
			});
		}

		this.Initialize = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerInitialize?" + params, OnComplete, OnError);
			});
		}

		this.SetCalendarTypes = function(serviceTypes) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, serviceTypes: JSON.stringify({"serviceTypes": arguments[0].serviceTypes})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId, serviceTypes: JSON.stringify({"serviceTypes": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(serviceTypes&& response.data.serviceTypes)
						VCUtils.jQuery.extend(serviceTypes, response.data.serviceTypes);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerSetCalendarTypes?" + params, OnComplete, OnError);
			});
		}

		this.Uninitialize = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({calendarMgr: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarManagerUninitialize?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.CreateVidyoCalendarManagerFeedback = function(serviceStatus, uninitialized, calendarCreated) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoCalendarManagerFeedback = new contextObj.VidyoCalendarManagerFeedback(response.data.VidyoCalendarManagerFeedback);	// copy construct
				if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackServiceDiscovery = args[0].serviceStatus;
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackUninitialized = args[0].uninitialized;
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarCreated = args[0].calendarCreated;
				} else {
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackServiceDiscovery = serviceStatus;
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackUninitialized = uninitialized;
					vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarCreated = calendarCreated;
				}
				objects[vidyoCalendarManagerFeedback.objId] = vidyoCalendarManagerFeedback;
				resolve(vidyoCalendarManagerFeedback);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoCalendarManagerFeedbackConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoCalendarManagerFeedback = function(serviceStatus, uninitialized, calendarCreated) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarManagerFeedback"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCalendarManagerFeedbackServiceDiscovery = arguments[0].serviceStatus;
				this.VidyoCalendarManagerFeedbackUninitialized = arguments[0].uninitialized;
				this.VidyoCalendarManagerFeedbackCalendarCreated = arguments[0].calendarCreated;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
				this.VidyoCalendarManagerFeedbackServiceDiscovery = serviceStatus;
				this.VidyoCalendarManagerFeedbackUninitialized = uninitialized;
				this.VidyoCalendarManagerFeedbackCalendarCreated = calendarCreated;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoCalendarManagerFeedbackConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoCalendarManagerFeedback);
			objects[this.objId] = this;

		}

		return this;
	}

	this.VidyoCalendar = function(){

		this.Destruct = function() {
			GetRequest("VidyoCalendarDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.Connect = function(connProperties) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, connProperties: JSON.stringify({"connProperties": arguments[0].connProperties})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, connProperties: JSON.stringify({"connProperties": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(connProperties&& response.data.connProperties)
						VCUtils.jQuery.extend(connProperties, response.data.connProperties);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarConnect?" + params, OnComplete, OnError);
			});
		}

		this.CreateMeeting = function(feedback, meeting, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), meeting: (arguments[0].meeting ? arguments[0].meeting.objId : 0), createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0), meeting: (arguments[1] ? arguments[1].objId : 0), createToken: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(meeting&& response.data.meeting)
						VCUtils.jQuery.extend(meeting, response.data.meeting);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarCreateMeeting?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetMeetingsByDay = function(year, month, day, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0].year, month: arguments[0].month, day: arguments[0].day, createToken: arguments[0].createToken});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0], month: arguments[1], day: arguments[2], createToken: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetMeetingsByDay?" + params, OnComplete, OnError);
			});
		}

		this.GetMeetingsByMonth = function(year, month, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0].year, month: arguments[0].month, createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0], month: arguments[1], createToken: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetMeetingsByMonth?" + params, OnComplete, OnError);
			});
		}

		this.GetMeetingsByWeek = function(year, month, day, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0].year, month: arguments[0].month, day: arguments[0].day, createToken: arguments[0].createToken});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, year: arguments[0], month: arguments[1], day: arguments[2], createToken: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetMeetingsByWeek?" + params, OnComplete, OnError);
			});
		}

		this.GetServiceState = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetServiceState?" + params, OnComplete, OnError);
			});
		}

		this.GetServiceType = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarGetServiceType?" + params, OnComplete, OnError);
			});
		}

		this.RemoveMeeting = function(feedback, meeting, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), meeting: (arguments[0].meeting ? arguments[0].meeting.objId : 0), createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0), meeting: (arguments[1] ? arguments[1].objId : 0), createToken: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(meeting&& response.data.meeting)
						VCUtils.jQuery.extend(meeting, response.data.meeting);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarRemoveMeeting?" + params, OnComplete, OnError);
			});
		}

		this.SearchMeetings = function(searchText, beginDate, endDate, index, pageSize) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, searchText: arguments[0].searchText, beginDate: arguments[0].beginDate, endDate: arguments[0].endDate, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, searchText: arguments[0], beginDate: arguments[1], endDate: arguments[2], index: arguments[3], pageSize: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarSearchMeetings?" + params, OnComplete, OnError);
			});
		}

		this.SetRoomIdMatchString = function(regexp) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, regexp: arguments[0].regexp});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, regexp: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarSetRoomIdMatchString?" + params, OnComplete, OnError);
			});
		}

		this.UpdateMeeting = function(feedback, meeting, createToken) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), meeting: (arguments[0].meeting ? arguments[0].meeting.objId : 0), createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0), meeting: (arguments[1] ? arguments[1].objId : 0), createToken: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(meeting&& response.data.meeting)
						VCUtils.jQuery.extend(meeting, response.data.meeting);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCalendarUpdateMeeting?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.CreateVidyoCalendarFeedback = function(connectState, disconnected, meetingEvent, meetingCreatedByService, meetingCreated, meetingUpdatedByService, meetingUpdated, meetingRemovedByService, meetingRemoved, getMeetingResults) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else if (arguments.length === 10 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoCalendarFeedback = new contextObj.VidyoCalendarFeedback(response.data.VidyoCalendarFeedback);	// copy construct
				if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
					vidyoCalendarFeedback.VidyoCalendarFeedbackConnectResult = args[0].connectState;
					vidyoCalendarFeedback.VidyoCalendarFeedbackDisconnected = args[0].disconnected;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingEventNotification = args[0].meetingEvent;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedByService = args[0].meetingCreatedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreated = args[0].meetingCreated;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdatedByService = args[0].meetingUpdatedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdated = args[0].meetingUpdated;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemovedByService = args[0].meetingRemovedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemoved = args[0].meetingRemoved;
					vidyoCalendarFeedback.VidyoCalendarFeedbackGetMeetingsResult = args[0].getMeetingResults;
				} else {
					vidyoCalendarFeedback.VidyoCalendarFeedbackConnectResult = connectState;
					vidyoCalendarFeedback.VidyoCalendarFeedbackDisconnected = disconnected;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingEventNotification = meetingEvent;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedByService = meetingCreatedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreated = meetingCreated;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdatedByService = meetingUpdatedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdated = meetingUpdated;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemovedByService = meetingRemovedByService;
					vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemoved = meetingRemoved;
					vidyoCalendarFeedback.VidyoCalendarFeedbackGetMeetingsResult = getMeetingResults;
				}
				objects[vidyoCalendarFeedback.objId] = vidyoCalendarFeedback;
				resolve(vidyoCalendarFeedback);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoCalendarFeedbackConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoCalendarFeedback = function(connectState, disconnected, meetingEvent, meetingCreatedByService, meetingCreated, meetingUpdatedByService, meetingUpdated, meetingRemovedByService, meetingRemoved, getMeetingResults) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarFeedback"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCalendarFeedbackConnectResult = arguments[0].connectState;
				this.VidyoCalendarFeedbackDisconnected = arguments[0].disconnected;
				this.VidyoCalendarFeedbackMeetingEventNotification = arguments[0].meetingEvent;
				this.VidyoCalendarFeedbackMeetingCreatedByService = arguments[0].meetingCreatedByService;
				this.VidyoCalendarFeedbackMeetingCreated = arguments[0].meetingCreated;
				this.VidyoCalendarFeedbackMeetingUpdatedByService = arguments[0].meetingUpdatedByService;
				this.VidyoCalendarFeedbackMeetingUpdated = arguments[0].meetingUpdated;
				this.VidyoCalendarFeedbackMeetingRemovedByService = arguments[0].meetingRemovedByService;
				this.VidyoCalendarFeedbackMeetingRemoved = arguments[0].meetingRemoved;
				this.VidyoCalendarFeedbackGetMeetingsResult = arguments[0].getMeetingResults;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else if (arguments.length === 10 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
				this.VidyoCalendarFeedbackConnectResult = connectState;
				this.VidyoCalendarFeedbackDisconnected = disconnected;
				this.VidyoCalendarFeedbackMeetingEventNotification = meetingEvent;
				this.VidyoCalendarFeedbackMeetingCreatedByService = meetingCreatedByService;
				this.VidyoCalendarFeedbackMeetingCreated = meetingCreated;
				this.VidyoCalendarFeedbackMeetingUpdatedByService = meetingUpdatedByService;
				this.VidyoCalendarFeedbackMeetingUpdated = meetingUpdated;
				this.VidyoCalendarFeedbackMeetingRemovedByService = meetingRemovedByService;
				this.VidyoCalendarFeedbackMeetingRemoved = meetingRemoved;
				this.VidyoCalendarFeedbackGetMeetingsResult = getMeetingResults;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoCalendarFeedbackConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoCalendarFeedback);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoCalendarFeedbackDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		return this;
	}

	this.CreateVidyoConnector = function(viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			arguments[0].viewId = UpdateViewOnDOM("create", arguments[0].viewId, arguments[0].viewStyle, arguments[0].remoteParticipants, arguments[0].logFileFilter, arguments[0].logFileName, arguments[0].userData);
			var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName, userData: arguments[0].userData});
		} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "number")){
			arguments[0] = UpdateViewOnDOM("create", viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData);
			var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], logFileFilter: arguments[3], logFileName: arguments[4], userData: arguments[5]});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoConnector = new contextObj.VidyoConnector(response.data.VidyoConnector);	// copy construct
				objects[vidyoConnector.objId] = vidyoConnector;
				resolve(vidyoConnector);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoConnectorConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoConnector = function(viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoConnector"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("constructor", arguments[0].viewId, arguments[0].viewStyle, arguments[0].remoteParticipants, arguments[0].logFileFilter, arguments[0].logFileName, arguments[0].userData);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName, userData: arguments[0].userData});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "number")){
				arguments[0] = UpdateViewOnDOM("constructor", viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], logFileFilter: arguments[3], logFileName: arguments[4], userData: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoConnectorConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoConnector);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoConnectorDestruct?" + VCUtils.jQuery.param({ c: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AssignViewToLocalCamera = function(viewId, camera, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToLocalCamera", arguments[0].viewId, arguments[0].camera, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToLocalCamera", viewId, camera, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], camera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(camera&& response.data.camera)
						VCUtils.jQuery.extend(camera, response.data.camera);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorAssignViewToLocalCamera?" + params, OnComplete, OnError);
			});
		}

		this.AssignViewToRemoteCamera = function(viewId, camera, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToRemoteCamera", arguments[0].viewId, arguments[0].camera, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToRemoteCamera", viewId, camera, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], camera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(camera&& response.data.camera)
						VCUtils.jQuery.extend(camera, response.data.camera);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorAssignViewToRemoteCamera?" + params, OnComplete, OnError);
			});
		}

		this.AssignViewToRemoteWindowShare = function(viewId, windowShare, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToRemoteWindowShare", arguments[0].viewId, arguments[0].windowShare, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, windowShare: (arguments[0].windowShare ? arguments[0].windowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToRemoteWindowShare", viewId, windowShare, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], windowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(windowShare&& response.data.windowShare)
						VCUtils.jQuery.extend(windowShare, response.data.windowShare);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorAssignViewToRemoteWindowShare?" + params, OnComplete, OnError);
			});
		}

		this.Connect = function(host, token, displayName, resourceId, onSuccess, onFailure, onDisconnected) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
				this.VidyoConnectorOnFailure = arguments[0].onFailure;
				this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
				var params = VCUtils.jQuery.param({c: this.objId, host: arguments[0].host, token: arguments[0].token, displayName: arguments[0].displayName, resourceId: arguments[0].resourceId});
			} else if (arguments.length === 7 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function")){
				this.VidyoConnectorOnSuccess = onSuccess;
				this.VidyoConnectorOnFailure = onFailure;
				this.VidyoConnectorOnDisconnected = onDisconnected;
				var params = VCUtils.jQuery.param({c: this.objId, host: arguments[0], token: arguments[1], displayName: arguments[2], resourceId: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorConnect?" + params, OnComplete, OnError);
			});
		}

		this.CycleCamera = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorCycleCamera?" + params, OnComplete, OnError);
			});
		}

		this.CycleMicrophone = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorCycleMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.CycleSpeaker = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorCycleSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.Disconnect = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorDisconnect?" + params, OnComplete, OnError);
			});
		}

		this.HideView = function(viewId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("HideView", arguments[0].viewId);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				arguments[0] = UpdateViewOnDOM("HideView", viewId);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorHideView?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalCameraEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLocalCameraAdded = arguments[0].onAdded;
				this.VidyoConnectorOnLocalCameraRemoved = arguments[0].onRemoved;
				this.VidyoConnectorOnLocalCameraSelected = arguments[0].onSelected;
				this.VidyoConnectorOnLocalCameraStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnLocalCameraAdded = onAdded;
				this.VidyoConnectorOnLocalCameraRemoved = onRemoved;
				this.VidyoConnectorOnLocalCameraSelected = onSelected;
				this.VidyoConnectorOnLocalCameraStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLocalCameraEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalMicrophoneEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLocalMicrophoneAdded = arguments[0].onAdded;
				this.VidyoConnectorOnLocalMicrophoneRemoved = arguments[0].onRemoved;
				this.VidyoConnectorOnLocalMicrophoneSelected = arguments[0].onSelected;
				this.VidyoConnectorOnLocalMicrophoneStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnLocalMicrophoneAdded = onAdded;
				this.VidyoConnectorOnLocalMicrophoneRemoved = onRemoved;
				this.VidyoConnectorOnLocalMicrophoneSelected = onSelected;
				this.VidyoConnectorOnLocalMicrophoneStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalMonitorEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLocalMonitorAdded = arguments[0].onAdded;
				this.VidyoConnectorOnLocalMonitorRemoved = arguments[0].onRemoved;
				this.VidyoConnectorOnLocalMonitorSelected = arguments[0].onSelected;
				this.VidyoConnectorOnLocalMonitorStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnLocalMonitorAdded = onAdded;
				this.VidyoConnectorOnLocalMonitorRemoved = onRemoved;
				this.VidyoConnectorOnLocalMonitorSelected = onSelected;
				this.VidyoConnectorOnLocalMonitorStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLocalMonitorEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalSpeakerEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLocalSpeakerAdded = arguments[0].onAdded;
				this.VidyoConnectorOnLocalSpeakerRemoved = arguments[0].onRemoved;
				this.VidyoConnectorOnLocalSpeakerSelected = arguments[0].onSelected;
				this.VidyoConnectorOnLocalSpeakerStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnLocalSpeakerAdded = onAdded;
				this.VidyoConnectorOnLocalSpeakerRemoved = onRemoved;
				this.VidyoConnectorOnLocalSpeakerSelected = onSelected;
				this.VidyoConnectorOnLocalSpeakerStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalWindowShareEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLocalWindowShareAdded = arguments[0].onAdded;
				this.VidyoConnectorOnLocalWindowShareRemoved = arguments[0].onRemoved;
				this.VidyoConnectorOnLocalWindowShareSelected = arguments[0].onSelected;
				this.VidyoConnectorOnLocalWindowShareStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnLocalWindowShareAdded = onAdded;
				this.VidyoConnectorOnLocalWindowShareRemoved = onRemoved;
				this.VidyoConnectorOnLocalWindowShareSelected = onSelected;
				this.VidyoConnectorOnLocalWindowShareStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLogEventListener = function(onLog, filter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnLog = arguments[0].onLog;
				var params = VCUtils.jQuery.param({c: this.objId, filter: arguments[0].filter});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
				this.VidyoConnectorOnLog = onLog;
				var params = VCUtils.jQuery.param({c: this.objId, filter: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterLogEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterMessageEventListener = function(onChatMessageReceived) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnChatMessageReceived = arguments[0].onChatMessageReceived;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoConnectorOnChatMessageReceived = onChatMessageReceived;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterMessageEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterParticipantEventListener = function(onJoined, onLeft, onDynamicChanged, onLoudestChanged) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnParticipantJoined = arguments[0].onJoined;
				this.VidyoConnectorOnParticipantLeft = arguments[0].onLeft;
				this.VidyoConnectorOnDynamicParticipantChanged = arguments[0].onDynamicChanged;
				this.VidyoConnectorOnLoudestParticipantChanged = arguments[0].onLoudestChanged;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoConnectorOnParticipantJoined = onJoined;
				this.VidyoConnectorOnParticipantLeft = onLeft;
				this.VidyoConnectorOnDynamicParticipantChanged = onDynamicChanged;
				this.VidyoConnectorOnLoudestParticipantChanged = onLoudestChanged;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterParticipantEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteCameraEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnRemoteCameraAdded = arguments[0].onAdded;
				this.VidyoConnectorOnRemoteCameraRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoConnectorOnRemoteCameraAdded = onAdded;
				this.VidyoConnectorOnRemoteCameraRemoved = onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterRemoteCameraEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteMicrophoneEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnRemoteMicrophoneAdded = arguments[0].onAdded;
				this.VidyoConnectorOnRemoteMicrophoneRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoConnectorOnRemoteMicrophoneAdded = onAdded;
				this.VidyoConnectorOnRemoteMicrophoneRemoved = onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteWindowShareEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnRemoteWindowShareAdded = arguments[0].onAdded;
				this.VidyoConnectorOnRemoteWindowShareRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoConnectorOnRemoteWindowShareAdded = onAdded;
				this.VidyoConnectorOnRemoteWindowShareRemoved = onRemoved;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterResourceManagerEventListener = function(onAvailableResourcesChanged, onMaxRemoteSourcesChanged) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoConnectorOnAvailableResourcesChanged = arguments[0].onAvailableResourcesChanged;
				this.VidyoConnectorOnMaxRemoteSourcesChanged = arguments[0].onMaxRemoteSourcesChanged;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoConnectorOnAvailableResourcesChanged = onAvailableResourcesChanged;
				this.VidyoConnectorOnMaxRemoteSourcesChanged = onMaxRemoteSourcesChanged;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorRegisterResourceManagerEventListener?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultCamera = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectDefaultCamera?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultMicrophone = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectDefaultMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultSpeaker = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectDefaultSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.SelectLocalCamera = function(camera) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, camera: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectLocalCamera?" + params, OnComplete, OnError);
			});
		}

		this.SelectLocalMicrophone = function(microphone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, microphone: (arguments[0].microphone ? arguments[0].microphone.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, microphone: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectLocalMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.SelectLocalMonitor = function(monitor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, monitor: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectLocalMonitor?" + params, OnComplete, OnError);
			});
		}

		this.SelectLocalSpeaker = function(speaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.SelectLocalWindowShare = function(window) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, window: (arguments[0].window ? arguments[0].window.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, window: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSelectLocalWindowShare?" + params, OnComplete, OnError);
			});
		}

		this.SendChatMessage = function(message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, message: arguments[0].message});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, message: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSendChatMessage?" + params, OnComplete, OnError);
			});
		}

		this.SetCameraPrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSetCameraPrivacy?" + params, OnComplete, OnError);
			});
		}

		this.SetMicrophonePrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSetMicrophonePrivacy?" + params, OnComplete, OnError);
			});
		}

		this.SetMode = function(mode) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, mode: arguments[0].mode});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, mode: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSetMode?" + params, OnComplete, OnError);
			});
		}

		this.SetPreview = function(preview) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, preview: arguments[0].preview});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({c: this.objId, preview: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSetPreview?" + params, OnComplete, OnError);
			});
		}

		this.SetSpeakerPrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({c: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorSetSpeakerPrivacy?" + params, OnComplete, OnError);
			});
		}

		this.ShowViewAt = function(viewId, x, y, width, height) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("ShowViewAt", arguments[0].viewId, arguments[0].x, arguments[0].y, arguments[0].width, arguments[0].height);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				arguments[0] = UpdateViewOnDOM("ShowViewAt", viewId, x, y, width, height);
				var params = VCUtils.jQuery.param({c: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConnectorShowViewAt?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoGateway = function(){

		this.Destruct = function() {
			GetRequest("VidyoGatewayDestruct?" + VCUtils.jQuery.param({ gateway: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.Connect = function(host, token, displayName, resourceId, onSuccess, onFailure, onDisconnected) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoGatewayOnSuccess = arguments[0].onSuccess;
				this.VidyoGatewayOnFailure = arguments[0].onFailure;
				this.VidyoGatewayOnDisconnected = arguments[0].onDisconnected;
				var params = VCUtils.jQuery.param({gateway: this.objId, host: arguments[0].host, token: arguments[0].token, displayName: arguments[0].displayName, resourceId: arguments[0].resourceId});
			} else if (arguments.length === 7 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function")){
				this.VidyoGatewayOnSuccess = onSuccess;
				this.VidyoGatewayOnFailure = onFailure;
				this.VidyoGatewayOnDisconnected = onDisconnected;
				var params = VCUtils.jQuery.param({gateway: this.objId, host: arguments[0], token: arguments[1], displayName: arguments[2], resourceId: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoGatewayConnect?" + params, OnComplete, OnError);
			});
		}

		this.Disconnect = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({gateway: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({gateway: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoGatewayDisconnect?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoDevice = function(){

		this.Destruct = function() {
			GetRequest("VidyoDeviceDestruct?" + VCUtils.jQuery.param({ device: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoDeviceGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoDeviceGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetType = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({d: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoDeviceGetType?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalCamera = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalCameraDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalRenderer = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraAddToLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.AddToRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraAddToRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetPosition = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraGetPosition?" + params, OnComplete, OnError);
			});
		}

		this.GetVideoCapabilities = function(capabilities) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(capabilities&& response.data.capabilities)
						VCUtils.jQuery.extend(capabilities, response.data.capabilities);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraGetVideoCapabilities?" + params, OnComplete, OnError);
			});
		}

		this.IsPaused = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraIsPaused?" + params, OnComplete, OnError);
			});
		}

		this.IsSuspended = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraIsSuspended?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalRenderer = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraRemoveFromLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.Resume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraResume?" + params, OnComplete, OnError);
			});
		}

		this.SetAspectRatioConstraint = function(aspectRatioWidth, aspectRatioHeight) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, aspectRatioWidth: arguments[0], aspectRatioHeight: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraSetAspectRatioConstraint?" + params, OnComplete, OnError);
			});
		}

		this.SetBoundsConstraint = function(minWidth, minHeight, maxWidth, maxHeight, maxFrameInterval, minFrameInterval, aspectRatioWidth, aspectRatioHeight, temporalSpatialTradeOff) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, minWidth: arguments[0].minWidth, minHeight: arguments[0].minHeight, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight, temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff});
			} else if (arguments.length === 9 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "number") && (typeof(arguments[7]) === "number") && (typeof(arguments[8]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, minWidth: arguments[0], minHeight: arguments[1], maxWidth: arguments[2], maxHeight: arguments[3], maxFrameInterval: arguments[4], minFrameInterval: arguments[5], aspectRatioWidth: arguments[6], aspectRatioHeight: arguments[7], temporalSpatialTradeOff: arguments[8]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraSetBoundsConstraint?" + params, OnComplete, OnError);
			});
		}

		this.SetCapabilitiesConstraint = function(capabilities, temporalSpatialTradeOff) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities}), temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0]}), temporalSpatialTradeOff: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraSetCapabilitiesConstraint?" + params, OnComplete, OnError);
			});
		}

		this.SetConstraints = function(minWidth, minHeight, maxWidth, maxHeight, maxFrameInterval, minFrameInterval, aspectRatioWidth, aspectRatioHeight, temporalSpatialTradeOff, capabilities) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, minWidth: arguments[0].minWidth, minHeight: arguments[0].minHeight, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight, temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities})});
			} else if (arguments.length === 10 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "number") && (typeof(arguments[7]) === "number") && (typeof(arguments[8]) === "number") && (typeof(arguments[9]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, minWidth: arguments[0], minHeight: arguments[1], maxWidth: arguments[2], maxHeight: arguments[3], maxFrameInterval: arguments[4], minFrameInterval: arguments[5], aspectRatioWidth: arguments[6], aspectRatioHeight: arguments[7], temporalSpatialTradeOff: arguments[8], capabilities: JSON.stringify({"capabilities": arguments[9]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalCameraSetConstraints?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalMicrophone = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalMicrophoneDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalSpeaker = function(speaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneAddToLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.AddToRemoteSpeaker = function(remoteSpeaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneAddToRemoteSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.DisableDebugRecording = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneDisableDebugRecording?" + params, OnComplete, OnError);
			});
		}

		this.EnableDebugRecording = function(dir) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, dir: arguments[0].dir});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, dir: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneEnableDebugRecording?" + params, OnComplete, OnError);
			});
		}

		this.GetAutoGain = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneGetAutoGain?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetVoiceProcessing = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneGetVoiceProcessing?" + params, OnComplete, OnError);
			});
		}

		this.GetVolume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneGetVolume?" + params, OnComplete, OnError);
			});
		}

		this.HideDebugDialog = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({microphone: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({microphone: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneHideDebugDialog?" + params, OnComplete, OnError);
			});
		}

		this.IsDebugRecordingEnabled = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneIsDebugRecordingEnabled?" + params, OnComplete, OnError);
			});
		}

		this.IsPaused = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneIsPaused?" + params, OnComplete, OnError);
			});
		}

		this.Pause = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophonePause?" + params, OnComplete, OnError);
			});
		}

		this.PlayTone = function(dtmfTone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, dtmfTone: arguments[0].dtmfTone});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, dtmfTone: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophonePlayTone?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalSpeaker = function(speaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneRemoveFromLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromRemoteSpeaker = function(remoteSpeaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneRemoveFromRemoteSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.Resume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneResume?" + params, OnComplete, OnError);
			});
		}

		this.SetAutoGain = function(autoGain) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, autoGain: arguments[0].autoGain});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({m: this.objId, autoGain: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneSetAutoGain?" + params, OnComplete, OnError);
			});
		}

		this.SetEchoCancellation = function(speaker, isEnable) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), isEnable: arguments[0].isEnable});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0), isEnable: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneSetEchoCancellation?" + params, OnComplete, OnError);
			});
		}

		this.SetVoiceProcessing = function(voiceProcessing) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, voiceProcessing: arguments[0].voiceProcessing});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({m: this.objId, voiceProcessing: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneSetVoiceProcessing?" + params, OnComplete, OnError);
			});
		}

		this.SetVolume = function(volumePercent) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, volumePercent: arguments[0].volumePercent});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, volumePercent: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneSetVolume?" + params, OnComplete, OnError);
			});
		}

		this.ShowDebugDialog = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({microphone: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({microphone: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMicrophoneShowDebugDialog?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalMonitor = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalMonitorDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorAddToLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.AddToRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorAddToRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.ClearConstraints = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorClearConstraints?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetPreviewFrameDataUri = function(maxWidth, maxHeight, videoFrame) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, videoFrame: arguments[0].videoFrame});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, maxWidth: arguments[0], maxHeight: arguments[1], videoFrame: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorGetPreviewFrameDataUri?" + params, OnComplete, OnError);
			});
		}

		this.GetPreviewFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoLocalMonitorOnPreviewDataUriComplete = arguments[0].onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
				this.VidyoLocalMonitorOnPreviewDataUriComplete = onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorGetPreviewFrameDataUriAsync?" + params, OnComplete, OnError);
			});
		}

		this.PrecludeWindow = function(w) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, w: (arguments[0].w ? arguments[0].w.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, w: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorPrecludeWindow?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorRemoveFromLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.SetBoundsConstraints = function(maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, maxWidth: arguments[0].maxWidth, minWidth: arguments[0].minWidth, maxHeight: arguments[0].maxHeight, minHeight: arguments[0].minHeight});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], maxWidth: arguments[2], minWidth: arguments[3], maxHeight: arguments[4], minHeight: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorSetBoundsConstraints?" + params, OnComplete, OnError);
			});
		}

		this.SetCaptureInterval = function(frameInterval) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, frameInterval: arguments[0].frameInterval});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, frameInterval: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorSetCaptureInterval?" + params, OnComplete, OnError);
			});
		}

		this.SetDiscrerteConstraints = function(maxFrameInterval, minFrameInterval, width, height, scaleFactor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, width: arguments[0].width, height: arguments[0].height, scaleFactor: arguments[0].scaleFactor});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], width: arguments[2], height: arguments[3], scaleFactor: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalMonitorSetDiscrerteConstraints?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalRenderer = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalRendererDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererGetName?" + params, OnComplete, OnError);
			});
		}

		this.IsPaused = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererIsPaused?" + params, OnComplete, OnError);
			});
		}

		this.Pause = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererPause?" + params, OnComplete, OnError);
			});
		}

		this.Resume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererResume?" + params, OnComplete, OnError);
			});
		}

		this.SetMaxStreams = function(numStreams) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, numStreams: arguments[0].numStreams});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, numStreams: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererSetMaxStreams?" + params, OnComplete, OnError);
			});
		}

		this.SetPosition = function(x, y, width, height) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, x: arguments[0], y: arguments[1], width: arguments[2], height: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalRendererSetPosition?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalSpeaker = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalSpeakerDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetVolume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerGetVolume?" + params, OnComplete, OnError);
			});
		}

		this.IsPaused = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerIsPaused?" + params, OnComplete, OnError);
			});
		}

		this.Pause = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerPause?" + params, OnComplete, OnError);
			});
		}

		this.PlayTone = function(dtmfTone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId, dtmfTone: arguments[0].dtmfTone});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({s: this.objId, dtmfTone: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerPlayTone?" + params, OnComplete, OnError);
			});
		}

		this.Resume = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerResume?" + params, OnComplete, OnError);
			});
		}

		this.SetVolume = function(volumePercent) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId, volumePercent: arguments[0].volumePercent});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({s: this.objId, volumePercent: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerSetVolume?" + params, OnComplete, OnError);
			});
		}

		this.StopSound = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalSpeakerStopSound?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoLocalWindowShare = function(){

		this.Destruct = function() {
			GetRequest("VidyoLocalWindowShareDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareAddToLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.AddToRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareAddToRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.ClearConstraints = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareClearConstraints?" + params, OnComplete, OnError);
			});
		}

		this.GetApplicationIconFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoLocalWindowShareOnApplicationIconDataUriComplete = arguments[0].onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
				this.VidyoLocalWindowShareOnApplicationIconDataUriComplete = onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetApplicationIconFrameDataUriAsync?" + params, OnComplete, OnError);
			});
		}

		this.GetApplicationName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetApplicationName?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetPreviewFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoLocalWindowShareOnPreviewDataUriComplete = arguments[0].onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
				this.VidyoLocalWindowShareOnPreviewDataUriComplete = onComplete;
				var params = VCUtils.jQuery.param({w: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetPreviewFrameDataUriAsync?" + params, OnComplete, OnError);
			});
		}

		this.GetProcessId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareGetProcessId?" + params, OnComplete, OnError);
			});
		}

		this.IsApplicationNameSet = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareIsApplicationNameSet?" + params, OnComplete, OnError);
			});
		}

		this.IsNameSet = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareIsNameSet?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareRemoveFromLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromRemoteRenderer = function(remoteRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
			});
		}

		this.SetBoundsConstraints = function(maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, maxWidth: arguments[0].maxWidth, minWidth: arguments[0].minWidth, maxHeight: arguments[0].maxHeight, minHeight: arguments[0].minHeight});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], maxWidth: arguments[2], minWidth: arguments[3], maxHeight: arguments[4], minHeight: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareSetBoundsConstraints?" + params, OnComplete, OnError);
			});
		}

		this.SetCapability = function(frameInterval, showCursor, redactOccludedAreas) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, frameInterval: arguments[0].frameInterval, showCursor: arguments[0].showCursor, redactOccludedAreas: arguments[0].redactOccludedAreas});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({w: this.objId, frameInterval: arguments[0], showCursor: arguments[1], redactOccludedAreas: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareSetCapability?" + params, OnComplete, OnError);
			});
		}

		this.SetDiscrerteConstraints = function(maxFrameInterval, minFrameInterval, width, height, scaleFactor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, width: arguments[0].width, height: arguments[0].height, scaleFactor: arguments[0].scaleFactor});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				var params = VCUtils.jQuery.param({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], width: arguments[2], height: arguments[3], scaleFactor: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoLocalWindowShareSetDiscrerteConstraints?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRemoteCamera = function(){

		this.Destruct = function() {
			GetRequest("VidyoRemoteCameraDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalRenderer = function(localRenderer, mode) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), mode: arguments[0].mode});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), mode: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraAddToLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetLocalRenderingStreamId = function(index) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, index: arguments[0].index});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, index: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraGetLocalRenderingStreamId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetPosition = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraGetPosition?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalRenderer = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraRemoveFromLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
				var params = VCUtils.jQuery.param({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteCameraSetPositionInLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRemoteMicrophone = function(){

		this.Destruct = function() {
			GetRequest("VidyoRemoteMicrophoneDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalSpeaker = function(speaker, mode) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), mode: arguments[0].mode});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0), mode: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteMicrophoneAddToLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteMicrophoneGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteMicrophoneGetName?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalSpeaker = function(speaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteMicrophoneRemoveFromLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRemoteRenderer = function(){

		this.Destruct = function() {
			GetRequest("VidyoRemoteRendererDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteRendererGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteRendererGetName?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRemoteSpeaker = function(){

		this.Destruct = function() {
			GetRequest("VidyoRemoteSpeakerDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteSpeakerGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({s: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteSpeakerGetName?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRemoteWindowShare = function(){

		this.Destruct = function() {
			GetRequest("VidyoRemoteWindowShareDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddToLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteWindowShareAddToLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteWindowShareGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({w: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteWindowShareGetName?" + params, OnComplete, OnError);
			});
		}

		this.RemoveFromLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRemoteWindowShareRemoveFromLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoVirtualDeviceManager = function(){

		this.Destruct = function() {
			GetRequest("VidyoVirtualDeviceManagerDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.LocalCameraEvent = function(endpoint, camera, state) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), camera: (arguments[0].camera ? arguments[0].camera.objId : 0), state: arguments[0].state});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), camera: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerLocalCameraEvent?" + params, OnComplete, OnError);
			});
		}

		this.LocalMicrophoneEvent = function(endpoint, microphone, state) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), microphone: (arguments[0].microphone ? arguments[0].microphone.objId : 0), state: arguments[0].state});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), microphone: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerLocalMicrophoneEvent?" + params, OnComplete, OnError);
			});
		}

		this.LocalMonitorEvent = function(endpoint, monitor, state) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0), state: arguments[0].state});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), monitor: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerLocalMonitorEvent?" + params, OnComplete, OnError);
			});
		}

		this.LocalSpeakerEvent = function(endpoint, speaker, state) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), state: arguments[0].state});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), speaker: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerLocalSpeakerEvent?" + params, OnComplete, OnError);
			});
		}

		this.LocalWindowShareEvent = function(endpoint, windowShare, state) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), windowShare: (arguments[0].windowShare ? arguments[0].windowShare.objId : 0), state: arguments[0].state});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), windowShare: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerLocalWindowShareEvent?" + params, OnComplete, OnError);
			});
		}

		this.MediaFailedEvent = function(endpoint) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoVirtualDeviceManagerMediaFailedEvent?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoCall = function(){

		this.Destruct = function() {
			GetRequest("VidyoCallDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.Accept = function(onInitiated, onEnded) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCallOnInitiated = arguments[0].onInitiated;
				this.VidyoCallOnEnded = arguments[0].onEnded;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoCallOnInitiated = onInitiated;
				this.VidyoCallOnEnded = onEnded;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallAccept?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetParticipants = function(participants) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, participants: JSON.stringify({"participants": arguments[0].participants})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, participants: JSON.stringify({"participants": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(participants&& response.data.participants)
						VCUtils.jQuery.extend(participants, response.data.participants);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetParticipants?" + params, OnComplete, OnError);
			});
		}

		this.GetRemoteRenderers = function(renderers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, renderers: JSON.stringify({"renderers": arguments[0].renderers})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, renderers: JSON.stringify({"renderers": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(renderers&& response.data.renderers)
						VCUtils.jQuery.extend(renderers, response.data.renderers);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetRemoteRenderers?" + params, OnComplete, OnError);
			});
		}

		this.GetRemoteSpeakers = function(speakers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, speakers: JSON.stringify({"speakers": arguments[0].speakers})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({c: this.objId, speakers: JSON.stringify({"speakers": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(speakers&& response.data.speakers)
						VCUtils.jQuery.extend(speakers, response.data.speakers);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetRemoteSpeakers?" + params, OnComplete, OnError);
			});
		}

		this.GetSubject = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetSubject?" + params, OnComplete, OnError);
			});
		}

		this.GetUser = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallGetUser?" + params, OnComplete, OnError);
			});
		}

		this.HangUp = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallHangUp?" + params, OnComplete, OnError);
			});
		}

		this.Initiate = function(onInitiated, onEnded) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCallOnInitiated = arguments[0].onInitiated;
				this.VidyoCallOnEnded = arguments[0].onEnded;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoCallOnInitiated = onInitiated;
				this.VidyoCallOnEnded = onEnded;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallInitiate?" + params, OnComplete, OnError);
			});
		}

		this.RegisterMessageEventListener = function(onMessageReceived, onMessageAcknowledged, onMessageRead, onMessageTypingIndication) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCallOnMessageReceived = arguments[0].onMessageReceived;
				this.VidyoCallOnMessageAcknowledged = arguments[0].onMessageAcknowledged;
				this.VidyoCallOnMessageRead = arguments[0].onMessageRead;
				this.VidyoCallOnMessageTypingIndication = arguments[0].onMessageTypingIndication;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoCallOnMessageReceived = onMessageReceived;
				this.VidyoCallOnMessageAcknowledged = onMessageAcknowledged;
				this.VidyoCallOnMessageRead = onMessageRead;
				this.VidyoCallOnMessageTypingIndication = onMessageTypingIndication;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallRegisterMessageEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterSubjectEventListener = function(onSetSubject) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoCallOnSetSubject = arguments[0].onSetSubject;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoCallOnSetSubject = onSetSubject;
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallRegisterSubjectEventListener?" + params, OnComplete, OnError);
			});
		}

		this.Reject = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({c: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallReject?" + params, OnComplete, OnError);
			});
		}

		this.SendMessage = function(message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, message: arguments[0].message});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, message: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallSendMessage?" + params, OnComplete, OnError);
			});
		}

		this.SetSubject = function(subject) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({c: this.objId, subject: arguments[0].subject});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({c: this.objId, subject: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoCallSetSubject?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.CreateVidyoEndpoint = function(viewId, viewStyle, remoteParticipants, consoleLogFilter, fileLogFilter, fileLogName) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			arguments[0].viewId = UpdateViewOnDOM("create", arguments[0].viewId, arguments[0].viewStyle, arguments[0].remoteParticipants, arguments[0].consoleLogFilter, arguments[0].fileLogFilter, arguments[0].fileLogName);
			var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, consoleLogFilter: arguments[0].consoleLogFilter, fileLogFilter: arguments[0].fileLogFilter, fileLogName: arguments[0].fileLogName});
		} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
			arguments[0] = UpdateViewOnDOM("create", viewId, viewStyle, remoteParticipants, consoleLogFilter, fileLogFilter, fileLogName);
			var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], consoleLogFilter: arguments[3], fileLogFilter: arguments[4], fileLogName: arguments[5]});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoEndpoint = new contextObj.VidyoEndpoint(response.data.VidyoEndpoint);	// copy construct
				objects[vidyoEndpoint.objId] = vidyoEndpoint;
				resolve(vidyoEndpoint);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoEndpointConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoEndpoint = function(viewId, viewStyle, remoteParticipants, consoleLogFilter, fileLogFilter, fileLogName) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoEndpoint"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("constructor", arguments[0].viewId, arguments[0].viewStyle, arguments[0].remoteParticipants, arguments[0].consoleLogFilter, arguments[0].fileLogFilter, arguments[0].fileLogName);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, consoleLogFilter: arguments[0].consoleLogFilter, fileLogFilter: arguments[0].fileLogFilter, fileLogName: arguments[0].fileLogName});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
				arguments[0] = UpdateViewOnDOM("constructor", viewId, viewStyle, remoteParticipants, consoleLogFilter, fileLogFilter, fileLogName);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], consoleLogFilter: arguments[3], fileLogFilter: arguments[4], fileLogName: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoEndpointConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoEndpoint);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoEndpointDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AssignViewToCamera = function(viewId, camera, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToCamera", arguments[0].viewId, arguments[0].camera, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToCamera", viewId, camera, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], camera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(camera&& response.data.camera)
						VCUtils.jQuery.extend(camera, response.data.camera);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointAssignViewToCamera?" + params, OnComplete, OnError);
			});
		}

		this.AssignViewToRemoteCamera = function(viewId, camera, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToRemoteCamera", arguments[0].viewId, arguments[0].camera, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToRemoteCamera", viewId, camera, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], camera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(camera&& response.data.camera)
						VCUtils.jQuery.extend(camera, response.data.camera);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointAssignViewToRemoteCamera?" + params, OnComplete, OnError);
			});
		}

		this.AssignViewToRemoteWindowShare = function(viewId, windowShare, displayCropped, allowZoom) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("AssignViewToRemoteWindowShare", arguments[0].viewId, arguments[0].windowShare, arguments[0].displayCropped, arguments[0].allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, windowShare: (arguments[0].windowShare ? arguments[0].windowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
				arguments[0] = UpdateViewOnDOM("AssignViewToRemoteWindowShare", viewId, windowShare, displayCropped, allowZoom);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], windowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(windowShare&& response.data.windowShare)
						VCUtils.jQuery.extend(windowShare, response.data.windowShare);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointAssignViewToRemoteWindowShare?" + params, OnComplete, OnError);
			});
		}

		this.CompressLogs = function(compressedFileName, onComplete) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLogCompressionComplete = arguments[0].onComplete;
				var params = VCUtils.jQuery.param({e: this.objId, compressedFileName: arguments[0].compressedFileName});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnLogCompressionComplete = onComplete;
				var params = VCUtils.jQuery.param({e: this.objId, compressedFileName: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCompressLogs?" + params, OnComplete, OnError);
			});
		}

		this.CreateRenderer = function(monitor, width, height) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0), width: arguments[0].width, height: arguments[0].height});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
				var params = VCUtils.jQuery.param({e: this.objId, monitor: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCreateRenderer?" + params, OnComplete, OnError);
			});
		}

		this.CreateRendererFromViewId = function(viewId, x, y, width, height) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("CreateRendererFromViewId", arguments[0].viewId, arguments[0].x, arguments[0].y, arguments[0].width, arguments[0].height);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				arguments[0] = UpdateViewOnDOM("CreateRendererFromViewId", viewId, x, y, width, height);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCreateRendererFromViewId?" + params, OnComplete, OnError);
			});
		}

		this.CycleCamera = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCycleCamera?" + params, OnComplete, OnError);
			});
		}

		this.CycleMicrophone = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCycleMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.CycleSpeaker = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointCycleSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.EnableDebugPort = function(port, logFilter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, port: arguments[0].port, logFilter: arguments[0].logFilter});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, port: arguments[0], logFilter: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointEnableDebugPort?" + params, OnComplete, OnError);
			});
		}

		this.EnableFileLogger = function(fileLogName, fileLogFilter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, fileLogName: arguments[0].fileLogName, fileLogFilter: arguments[0].fileLogFilter});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, fileLogName: arguments[0], fileLogFilter: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointEnableFileLogger?" + params, OnComplete, OnError);
			});
		}

		this.GenerateLicenseKey = function(licenseKey) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, licenseKey: arguments[0].licenseKey});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, licenseKey: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointGenerateLicenseKey?" + params, OnComplete, OnError);
			});
		}

		this.GetApplicationTag = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointGetApplicationTag?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetStats = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointGetStats?" + params, OnComplete, OnError);
			});
		}

		this.HideView = function(viewId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("HideView", arguments[0].viewId);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				arguments[0] = UpdateViewOnDOM("HideView", viewId);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointHideView?" + params, OnComplete, OnError);
			});
		}

		this.LocalCameraSelectAdvanced = function(localCamera, previewedPreCall, previewedInCall) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), previewedPreCall: arguments[0].previewedPreCall, previewedInCall: arguments[0].previewedInCall});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0), previewedPreCall: arguments[1], previewedInCall: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalCameraSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalCameraUnselectAdvanced = function(localCamera) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalCameraUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalMicrophoneSelectAdvanced = function(localMicrophone, previewedPreCall) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0), previewedPreCall: arguments[0].previewedPreCall});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0), previewedPreCall: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalMicrophoneSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalMicrophoneUnselectAdvanced = function(localMicrophone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalMicrophoneUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalMonitorSelectAdvanced = function(localMonitor, previewed) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), previewed: arguments[0].previewed});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), previewed: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalMonitorSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalMonitorUnselectAdvanced = function(localMonitor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalMonitorUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalRendererSelectAdvanced = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalRendererSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalRendererUnselectAdvanced = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalRendererUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalSpeakerSelectAdvanced = function(localSpeaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalSpeakerSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalSpeakerUnselectAdvanced = function(localSpeaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalSpeakerUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalWindowShareSelectAdvanced = function(localWindowShare, previewed) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), previewed: arguments[0].previewed});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), previewed: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalWindowShareSelectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.LocalWindowShareUnselectAdvanced = function(localWindowShare) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointLocalWindowShareUnselectAdvanced?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalCameraEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalCameraAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalCameraRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalCameraSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalCameraStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalCameraAdded = onAdded;
				this.VidyoEndpointOnLocalCameraRemoved = onRemoved;
				this.VidyoEndpointOnLocalCameraSelected = onSelected;
				this.VidyoEndpointOnLocalCameraStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalCameraEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalMicrophoneEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalMicrophoneAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalMicrophoneRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalMicrophoneSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalMicrophoneStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalMicrophoneAdded = onAdded;
				this.VidyoEndpointOnLocalMicrophoneRemoved = onRemoved;
				this.VidyoEndpointOnLocalMicrophoneSelected = onSelected;
				this.VidyoEndpointOnLocalMicrophoneStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalMonitorEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalMonitorAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalMonitorRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalMonitorSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalMonitorStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalMonitorAdded = onAdded;
				this.VidyoEndpointOnLocalMonitorRemoved = onRemoved;
				this.VidyoEndpointOnLocalMonitorSelected = onSelected;
				this.VidyoEndpointOnLocalMonitorStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalMonitorEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalRendererEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalRendererAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalRendererRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalRendererSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalRendererStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalRendererAdded = onAdded;
				this.VidyoEndpointOnLocalRendererRemoved = onRemoved;
				this.VidyoEndpointOnLocalRendererSelected = onSelected;
				this.VidyoEndpointOnLocalRendererStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalRendererEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalSpeakerEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalSpeakerAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalSpeakerRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalSpeakerSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalSpeakerStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalSpeakerAdded = onAdded;
				this.VidyoEndpointOnLocalSpeakerRemoved = onRemoved;
				this.VidyoEndpointOnLocalSpeakerSelected = onSelected;
				this.VidyoEndpointOnLocalSpeakerStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLocalWindowShareEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLocalWindowShareAdded = arguments[0].onAdded;
				this.VidyoEndpointOnLocalWindowShareRemoved = arguments[0].onRemoved;
				this.VidyoEndpointOnLocalWindowShareSelected = arguments[0].onSelected;
				this.VidyoEndpointOnLocalWindowShareStateUpdated = arguments[0].onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoEndpointOnLocalWindowShareAdded = onAdded;
				this.VidyoEndpointOnLocalWindowShareRemoved = onRemoved;
				this.VidyoEndpointOnLocalWindowShareSelected = onSelected;
				this.VidyoEndpointOnLocalWindowShareStateUpdated = onStateUpdated;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLogEventListener = function(onLog, filter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnLog = arguments[0].onLog;
				var params = VCUtils.jQuery.param({e: this.objId, filter: arguments[0].filter});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
				this.VidyoEndpointOnLog = onLog;
				var params = VCUtils.jQuery.param({e: this.objId, filter: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterLogEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteCameraEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnRemoteCameraAdded = arguments[0].onAdded;
				this.VidyoEndpointOnRemoteCameraRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnRemoteCameraAdded = onAdded;
				this.VidyoEndpointOnRemoteCameraRemoved = onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterRemoteCameraEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteMicrophoneEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnRemoteMicrophoneAdded = arguments[0].onAdded;
				this.VidyoEndpointOnRemoteMicrophoneRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnRemoteMicrophoneAdded = onAdded;
				this.VidyoEndpointOnRemoteMicrophoneRemoved = onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteRendererEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnRemoteRendererAdded = arguments[0].onAdded;
				this.VidyoEndpointOnRemoteRendererRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnRemoteRendererAdded = onAdded;
				this.VidyoEndpointOnRemoteRendererRemoved = onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterRemoteRendererEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteSpeakerEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnRemoteSpeakerAdded = arguments[0].onAdded;
				this.VidyoEndpointOnRemoteSpeakerRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnRemoteSpeakerAdded = onAdded;
				this.VidyoEndpointOnRemoteSpeakerRemoved = onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterRemoteSpeakerEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRemoteWindowShareEventListener = function(onAdded, onRemoved) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoEndpointOnRemoteWindowShareAdded = arguments[0].onAdded;
				this.VidyoEndpointOnRemoteWindowShareRemoved = arguments[0].onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoEndpointOnRemoteWindowShareAdded = onAdded;
				this.VidyoEndpointOnRemoteWindowShareRemoved = onRemoved;
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRegisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RemoveRenderer = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(localRenderer&& response.data.localRenderer)
						VCUtils.jQuery.extend(localRenderer, response.data.localRenderer);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointRemoveRenderer?" + params, OnComplete, OnError);
			});
		}

		this.SelectCamera = function(camera) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, camera: (arguments[0].camera ? arguments[0].camera.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, camera: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectCamera?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultCamera = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectDefaultCamera?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultMicrophone = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectDefaultMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.SelectDefaultSpeaker = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectDefaultSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.SelectMicrophone = function(microphone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, microphone: (arguments[0].microphone ? arguments[0].microphone.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, microphone: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.SelectMonitor = function(monitor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, monitor: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectMonitor?" + params, OnComplete, OnError);
			});
		}

		this.SelectSpeaker = function(speaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.SelectWindow = function(window) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, window: (arguments[0].window ? arguments[0].window.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({e: this.objId, window: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSelectWindow?" + params, OnComplete, OnError);
			});
		}

		this.SetApplicationTag = function(applicationTag) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, applicationTag: arguments[0].applicationTag});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, applicationTag: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetApplicationTag?" + params, OnComplete, OnError);
			});
		}

		this.SetCameraPrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetCameraPrivacy?" + params, OnComplete, OnError);
			});
		}

		this.SetConsoleLoggerFilter = function(consoleLogFilter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, consoleLogFilter: arguments[0].consoleLogFilter});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, consoleLogFilter: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetConsoleLoggerFilter?" + params, OnComplete, OnError);
			});
		}

		this.SetConsoleLoggerLevelAndCategory = function(levelName, categoryName, on) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, levelName: arguments[0].levelName, categoryName: arguments[0].categoryName, on: arguments[0].on});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, levelName: arguments[0], categoryName: arguments[1], on: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetConsoleLoggerLevelAndCategory?" + params, OnComplete, OnError);
			});
		}

		this.SetFileLoggerFilter = function(fileLogFilter) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, fileLogFilter: arguments[0].fileLogFilter});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, fileLogFilter: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetFileLoggerFilter?" + params, OnComplete, OnError);
			});
		}

		this.SetFileLoggerLevelAndCategory = function(levelName, categoryName, on) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, levelName: arguments[0].levelName, categoryName: arguments[0].categoryName, on: arguments[0].on});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, levelName: arguments[0], categoryName: arguments[1], on: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetFileLoggerLevelAndCategory?" + params, OnComplete, OnError);
			});
		}

		this.SetLocation = function(latitude, longitude) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, latitude: arguments[0].latitude, longitude: arguments[0].longitude});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
				var params = VCUtils.jQuery.param({e: this.objId, latitude: arguments[0], longitude: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetLocation?" + params, OnComplete, OnError);
			});
		}

		this.SetMicrophonePrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetMicrophonePrivacy?" + params, OnComplete, OnError);
			});
		}

		this.SetMode = function(mode) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, mode: arguments[0].mode});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, mode: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetMode?" + params, OnComplete, OnError);
			});
		}

		this.SetPoolId = function(poolId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, poolId: arguments[0].poolId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({e: this.objId, poolId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetPoolId?" + params, OnComplete, OnError);
			});
		}

		this.SetPreview = function(preview) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, preview: arguments[0].preview});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, preview: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetPreview?" + params, OnComplete, OnError);
			});
		}

		this.SetSpeakerPrivacy = function(privacy) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0].privacy});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, privacy: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointSetSpeakerPrivacy?" + params, OnComplete, OnError);
			});
		}

		this.ShowViewAt = function(viewId, x, y, width, height) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				arguments[0].viewId = UpdateViewOnDOM("ShowViewAt", arguments[0].viewId, arguments[0].x, arguments[0].y, arguments[0].width, arguments[0].height);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
			} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
				arguments[0] = UpdateViewOnDOM("ShowViewAt", viewId, x, y, width, height);
				var params = VCUtils.jQuery.param({e: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointShowViewAt?" + params, OnComplete, OnError);
			});
		}

		this.StartDeviceDetection = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointStartDeviceDetection?" + params, OnComplete, OnError);
			});
		}

		this.StartLocationDetection = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointStartLocationDetection?" + params, OnComplete, OnError);
			});
		}

		this.StopDeviceDetection = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointStopDeviceDetection?" + params, OnComplete, OnError);
			});
		}

		this.StopLocationDetection = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointStopLocationDetection?" + params, OnComplete, OnError);
			});
		}

		this.UnregisterLogEventListener = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({e: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointUnregisterLogEventListener?" + params, OnComplete, OnError);
			});
		}

		this.ValidateLicenseKey = function(licenseKey, isValid) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({e: this.objId, licenseKey: arguments[0].licenseKey, isValid: arguments[0].isValid});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({e: this.objId, licenseKey: arguments[0], isValid: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoEndpointValidateLicenseKey?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoConsoleLogger = function(){

		this.GetBase = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({logger: arguments[0].logger});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({logger: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoConsoleLoggerGetBase?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoParticipant = function(){

		this.Destruct = function() {
			GetRequest("VidyoParticipantDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.GetContact = function(contact) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({p: this.objId, contact: JSON.stringify(arguments[0].contact)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({p: this.objId, contact: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(contact&& response.data.contact)
						VCUtils.jQuery.extend(contact, response.data.contact);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoParticipantGetContact?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoParticipantGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoParticipantGetName?" + params, OnComplete, OnError);
			});
		}

		this.GetUserId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoParticipantGetUserId?" + params, OnComplete, OnError);
			});
		}

		this.IsLocal = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({p: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoParticipantIsLocal?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoRoom = function(){

		this.Destruct = function() {
			GetRequest("VidyoRoomDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AcceptIncoming = function(onEntered, onExited) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnEntered = arguments[0].onEntered;
				this.VidyoRoomOnExited = arguments[0].onExited;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnEntered = onEntered;
				this.VidyoRoomOnExited = onExited;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAcceptIncoming?" + params, OnComplete, OnError);
			});
		}

		this.AcquireMediaRoute = function(onMediaRouteAcquired) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnMediaRouteAcquired = arguments[0].onMediaRouteAcquired;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoRoomOnMediaRouteAcquired = onMediaRouteAcquired;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAcquireMediaRoute?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalCamera = function(localCamera, removeOthers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), removeOthers: arguments[0].removeOthers});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalCamera?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalMicrophone = function(localMicrophone, removeOthers, isAES) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0), removeOthers: arguments[0].removeOthers, isAES: arguments[0].isAES});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1], isAES: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalMonitor = function(localMonitor, removeOthers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), removeOthers: arguments[0].removeOthers});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalMonitor?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalRenderer = function(localRenderer, removeOthers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), removeOthers: arguments[0].removeOthers});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalSpeaker = function(localSpeaker, removeOthers, isAES) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0), removeOthers: arguments[0].removeOthers, isAES: arguments[0].isAES});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1], isAES: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.AddLocalWindowShare = function(localWindowShare, removeOthers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), removeOthers: arguments[0].removeOthers});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
				var params = VCUtils.jQuery.param({r: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomAddLocalWindowShare?" + params, OnComplete, OnError);
			});
		}

		this.Delete = function(onDeleteResult) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnDeleteResult = arguments[0].onDeleteResult;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoRoomOnDeleteResult = onDeleteResult;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomDelete?" + params, OnComplete, OnError);
			});
		}

		this.DisableMedia = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomDisableMedia?" + params, OnComplete, OnError);
			});
		}

		this.EnableMedia = function(onMediaEnabled, onMediaFailed, onMediaDisabled) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnMediaEnabled = arguments[0].onMediaEnabled;
				this.VidyoRoomOnMediaFailed = arguments[0].onMediaFailed;
				this.VidyoRoomOnMediaDisabled = arguments[0].onMediaDisabled;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
				this.VidyoRoomOnMediaEnabled = onMediaEnabled;
				this.VidyoRoomOnMediaFailed = onMediaFailed;
				this.VidyoRoomOnMediaDisabled = onMediaDisabled;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomEnableMedia?" + params, OnComplete, OnError);
			});
		}

		this.Enter = function(onEntered, onExited) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnEntered = arguments[0].onEntered;
				this.VidyoRoomOnExited = arguments[0].onExited;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnEntered = onEntered;
				this.VidyoRoomOnExited = onExited;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomEnter?" + params, OnComplete, OnError);
			});
		}

		this.GetHistory = function(numMessages, onGetHistoryResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, numMessages: arguments[0].numMessages});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, numMessages: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetHistory?" + params, OnComplete, OnError);
			});
		}

		this.GetHistoryById = function(messageId, numMessagesBefore, numMessagesAfter, onGetHistoryResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, messageId: arguments[0].messageId, numMessagesBefore: arguments[0].numMessagesBefore, numMessagesAfter: arguments[0].numMessagesAfter});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, messageId: arguments[0], numMessagesBefore: arguments[1], numMessagesAfter: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetHistoryById?" + params, OnComplete, OnError);
			});
		}

		this.GetHistoryByTime = function(time, numMessagesBefore, numMessagesAfter, onGetHistoryResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, time: arguments[0].time, numMessagesBefore: arguments[0].numMessagesBefore, numMessagesAfter: arguments[0].numMessagesAfter});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
				var params = VCUtils.jQuery.param({r: this.objId, time: arguments[0], numMessagesBefore: arguments[1], numMessagesAfter: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetHistoryByTime?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetRoomProperties = function(onGetRoomPropertiesResult) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnGetRoomPropertiesResult = arguments[0].onGetRoomPropertiesResult;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoRoomOnGetRoomPropertiesResult = onGetRoomPropertiesResult;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetRoomProperties?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalCameras = function(cameras) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, cameras: JSON.stringify({"cameras": arguments[0].cameras})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, cameras: JSON.stringify({"cameras": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(cameras&& response.data.cameras)
						VCUtils.jQuery.extend(cameras, response.data.cameras);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalCameras?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalMicrophones = function(mics) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, mics: JSON.stringify({"mics": arguments[0].mics})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, mics: JSON.stringify({"mics": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(mics&& response.data.mics)
						VCUtils.jQuery.extend(mics, response.data.mics);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalMicrophones?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalMonitors = function(monitors) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, monitors: JSON.stringify({"monitors": arguments[0].monitors})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, monitors: JSON.stringify({"monitors": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(monitors&& response.data.monitors)
						VCUtils.jQuery.extend(monitors, response.data.monitors);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalMonitors?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalRenderers = function(renderers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, renderers: JSON.stringify({"renderers": arguments[0].renderers})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, renderers: JSON.stringify({"renderers": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(renderers&& response.data.renderers)
						VCUtils.jQuery.extend(renderers, response.data.renderers);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalRenderers?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalSpeakers = function(speakers) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, speakers: JSON.stringify({"speakers": arguments[0].speakers})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, speakers: JSON.stringify({"speakers": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(speakers&& response.data.speakers)
						VCUtils.jQuery.extend(speakers, response.data.speakers);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalSpeakers?" + params, OnComplete, OnError);
			});
		}

		this.GetSelectedLocalWindowShares = function(windowShares) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, windowShares: JSON.stringify({"windowShares": arguments[0].windowShares})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, windowShares: JSON.stringify({"windowShares": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(windowShares&& response.data.windowShares)
						VCUtils.jQuery.extend(windowShares, response.data.windowShares);
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetSelectedLocalWindowShares?" + params, OnComplete, OnError);
			});
		}

		this.GetStats = function(stats) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, stats: JSON.stringify(arguments[0].stats)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, stats: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(stats&& response.data.stats)
						VCUtils.jQuery.extend(stats, response.data.stats);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetStats?" + params, OnComplete, OnError);
			});
		}

		this.GetType = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetType?" + params, OnComplete, OnError);
			});
		}

		this.GetUser = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetUser?" + params, OnComplete, OnError);
			});
		}

		this.GetUserData = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomGetUserData?" + params, OnComplete, OnError);
			});
		}

		this.HideStatisticsDialog = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomHideStatisticsDialog?" + params, OnComplete, OnError);
			});
		}

		this.Invite = function(userId, message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, userId: arguments[0].userId, message: arguments[0].message});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, userId: arguments[0], message: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomInvite?" + params, OnComplete, OnError);
			});
		}

		this.InviteAll = function(message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, message: arguments[0].message});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, message: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomInviteAll?" + params, OnComplete, OnError);
			});
		}

		this.InviteN = function(userIds, message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, userIds: JSON.stringify({"userIds": arguments[0].userIds}), message: arguments[0].message});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, userIds: JSON.stringify({"userIds": arguments[0]}), message: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomInviteN?" + params, OnComplete, OnError);
			});
		}

		this.Leave = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomLeave?" + params, OnComplete, OnError);
			});
		}

		this.MessageSearch = function(searchText, index, pageSize, onMessageSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnMessageSearchResults = arguments[0].onMessageSearchResults;
				var params = VCUtils.jQuery.param({r: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoRoomOnMessageSearchResults = onMessageSearchResults;
				var params = VCUtils.jQuery.param({r: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomMessageSearch?" + params, OnComplete, OnError);
			});
		}

		this.RegisterMessageEventListener = function(onMessageReceived, onMessageAcknowledged, onMessageRead, onMessageTypingIndication) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnMessageReceived = arguments[0].onMessageReceived;
				this.VidyoRoomOnMessageAcknowledged = arguments[0].onMessageAcknowledged;
				this.VidyoRoomOnMessageRead = arguments[0].onMessageRead;
				this.VidyoRoomOnMessageTypingIndication = arguments[0].onMessageTypingIndication;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoRoomOnMessageReceived = onMessageReceived;
				this.VidyoRoomOnMessageAcknowledged = onMessageAcknowledged;
				this.VidyoRoomOnMessageRead = onMessageRead;
				this.VidyoRoomOnMessageTypingIndication = onMessageTypingIndication;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRegisterMessageEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterParticipantEventListener = function(onParticipantJoined, onParticipantLeft, onDynamicParticipantChanged, onLoudestParticipantChanged) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnParticipantJoined = arguments[0].onParticipantJoined;
				this.VidyoRoomOnParticipantLeft = arguments[0].onParticipantLeft;
				this.VidyoRoomOnDynamicParticipantChanged = arguments[0].onDynamicParticipantChanged;
				this.VidyoRoomOnLoudestParticipantChanged = arguments[0].onLoudestParticipantChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
				this.VidyoRoomOnParticipantJoined = onParticipantJoined;
				this.VidyoRoomOnParticipantLeft = onParticipantLeft;
				this.VidyoRoomOnDynamicParticipantChanged = onDynamicParticipantChanged;
				this.VidyoRoomOnLoudestParticipantChanged = onLoudestParticipantChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRegisterParticipantEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterResourceManagerEventListener = function(onAvailableResourcesChanged, onMaxRemoteSourcesChanged) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnAvailableResourcesChanged = arguments[0].onAvailableResourcesChanged;
				this.VidyoRoomOnMaxRemoteSourcesChanged = arguments[0].onMaxRemoteSourcesChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnAvailableResourcesChanged = onAvailableResourcesChanged;
				this.VidyoRoomOnMaxRemoteSourcesChanged = onMaxRemoteSourcesChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRegisterResourceManagerEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRoomPropertiesEventListener = function(onRoomPropertiesChanged) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnRoomPropertiesChanged = arguments[0].onRoomPropertiesChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoRoomOnRoomPropertiesChanged = onRoomPropertiesChanged;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRegisterRoomPropertiesEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterSubjectEventListener = function(onSetSubject) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnSetSubject = arguments[0].onSetSubject;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoRoomOnSetSubject = onSetSubject;
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRegisterSubjectEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RejectIncoming = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRejectIncoming?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalCamera = function(localCamera) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalCamera?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalMicrophone = function(localMicrophone) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalMicrophone?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalMonitor = function(localMonitor) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalMonitor?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalRenderer = function(localRenderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalSpeaker = function(localSpeaker) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalSpeaker?" + params, OnComplete, OnError);
			});
		}

		this.RemoveLocalWindowShare = function(localWindowShare) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomRemoveLocalWindowShare?" + params, OnComplete, OnError);
			});
		}

		this.SendMessage = function(message) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, message: arguments[0].message});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, message: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSendMessage?" + params, OnComplete, OnError);
			});
		}

		this.SendMessageAcknowledged = function(messageId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, messageId: arguments[0].messageId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, messageId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSendMessageAcknowledged?" + params, OnComplete, OnError);
			});
		}

		this.SendMessageTypingIndication = function(typingIndication) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, typingIndication: arguments[0].typingIndication});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, typingIndication: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSendMessageTypingIndication?" + params, OnComplete, OnError);
			});
		}

		this.SetDynamicGenerationPosition = function(generation, x, y, width, height, frameInterval) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, generation: arguments[0].generation, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, generation: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetDynamicGenerationPosition?" + params, OnComplete, OnError);
			});
		}

		this.SetDynamicLocalRenderer = function(renderer) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetDynamicLocalRenderer?" + params, OnComplete, OnError);
			});
		}

		this.SetFavorite = function(isFavorite, onSetFavoriteResult) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnSetFavoriteResult = arguments[0].onSetFavoriteResult;
				var params = VCUtils.jQuery.param({r: this.objId, isFavorite: arguments[0].isFavorite});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnSetFavoriteResult = onSetFavoriteResult;
				var params = VCUtils.jQuery.param({r: this.objId, isFavorite: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetFavorite?" + params, OnComplete, OnError);
			});
		}

		this.SetMaxAudioSources = function(count) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, count: arguments[0].count});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, count: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetMaxAudioSources?" + params, OnComplete, OnError);
			});
		}

		this.SetMaxVideoSources = function(count) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, count: arguments[0].count});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, count: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetMaxVideoSources?" + params, OnComplete, OnError);
			});
		}

		this.SetRoomProperties = function(roomProperties, onSetRoomPropertiesResult) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoRoomOnSetRoomPropertiesResult = arguments[0].onSetRoomPropertiesResult;
				var params = VCUtils.jQuery.param({r: this.objId, roomProperties: JSON.stringify(arguments[0].roomProperties)});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
				this.VidyoRoomOnSetRoomPropertiesResult = onSetRoomPropertiesResult;
				var params = VCUtils.jQuery.param({r: this.objId, roomProperties: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetRoomProperties?" + params, OnComplete, OnError);
			});
		}

		this.SetSubject = function(subject) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, subject: arguments[0].subject});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({r: this.objId, subject: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetSubject?" + params, OnComplete, OnError);
			});
		}

		this.SetUserData = function(userData) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, userData: arguments[0].userData});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
				var params = VCUtils.jQuery.param({r: this.objId, userData: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomSetUserData?" + params, OnComplete, OnError);
			});
		}

		this.ShowStatisticsDialog = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({r: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoRoomShowStatisticsDialog?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.CreateVidyoUser = function(endpoint) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			var params = VCUtils.jQuery.param({user: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
		} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
			var params = VCUtils.jQuery.param({user: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoUser = new contextObj.VidyoUser(response.data.VidyoUser);	// copy construct
				objects[vidyoUser.objId] = vidyoUser;
				resolve(vidyoUser);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoUserConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoUser = function(endpoint) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoUser"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({user: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({user: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoUserConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoUser);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoUserDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddRosterContact = function(userId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserAddRosterContact?" + params, OnComplete, OnError);
			});
		}

		this.AdvancedSearchRooms = function(fieldSet, fieldRelations, fieldValues, searchToken, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0].fieldSet}), fieldRelations: JSON.stringify({"fieldRelations": arguments[0].fieldRelations}), fieldValues: JSON.stringify({"fieldValues": arguments[0].fieldValues}), searchToken: arguments[0].searchToken, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 7 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "object") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0]}), fieldRelations: JSON.stringify({"fieldRelations": arguments[1]}), fieldValues: JSON.stringify({"fieldValues": arguments[2]}), searchToken: arguments[3], index: arguments[4], pageSize: arguments[5]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserAdvancedSearchRooms?" + params, OnComplete, OnError);
			});
		}

		this.AdvancedSearchUsers = function(fieldSet, fieldValues, searchToken, index, pageSize, onUserSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnUserSearchResults = arguments[0].onUserSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0].fieldSet}), fieldValues: JSON.stringify({"fieldValues": arguments[0].fieldValues}), searchToken: arguments[0].searchToken, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "function")){
				this.VidyoUserOnUserSearchResults = onUserSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0]}), fieldValues: JSON.stringify({"fieldValues": arguments[1]}), searchToken: arguments[2], index: arguments[3], pageSize: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserAdvancedSearchUsers?" + params, OnComplete, OnError);
			});
		}

		this.AllowSubscriber = function(userId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserAllowSubscriber?" + params, OnComplete, OnError);
			});
		}

		this.BlockSubscriber = function(userId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserBlockSubscriber?" + params, OnComplete, OnError);
			});
		}

		this.CreateCall = function(userId, createToken, onCallCreated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnCallCreated = arguments[0].onCallCreated;
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId, createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnCallCreated = onCallCreated;
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0], createToken: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserCreateCall?" + params, OnComplete, OnError);
			});
		}

		this.CreateRoomFromId = function(id, createToken, onRoomCreated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, id: arguments[0].id, createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnRoomCreated = onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, id: arguments[0], createToken: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserCreateRoomFromId?" + params, OnComplete, OnError);
			});
		}

		this.CreateRoomWithId = function(id, createToken, onRoomCreated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, id: arguments[0].id, createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnRoomCreated = onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, id: arguments[0], createToken: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserCreateRoomWithId?" + params, OnComplete, OnError);
			});
		}

		this.CreateTopicRoom = function(name, description, createToken, onRoomCreated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, name: arguments[0].name, description: arguments[0].description, createToken: arguments[0].createToken});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomCreated = onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, name: arguments[0], description: arguments[1], createToken: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserCreateTopicRoom?" + params, OnComplete, OnError);
			});
		}

		this.GetContact = function(userId, onGetContactResult) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnGetContactResult = arguments[0].onGetContactResult;
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
				this.VidyoUserOnGetContactResult = onGetContactResult;
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetContact?" + params, OnComplete, OnError);
			});
		}

		this.GetConversationRoom = function(userIds, createToken, onRoomCreated) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, userIds: JSON.stringify({"userIds": arguments[0].userIds}), createToken: arguments[0].createToken});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnRoomCreated = onRoomCreated;
				var params = VCUtils.jQuery.param({u: this.objId, userIds: JSON.stringify({"userIds": arguments[0]}), createToken: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetConversationRoom?" + params, OnComplete, OnError);
			});
		}

		this.GetCurrentRoster = function(roster) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, roster: JSON.stringify({"roster": arguments[0].roster})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({u: this.objId, roster: JSON.stringify({"roster": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(roster&& response.data.roster)
						VCUtils.jQuery.extend(roster, response.data.roster);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetCurrentRoster?" + params, OnComplete, OnError);
			});
		}

		this.GetEndpoint = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetEndpoint?" + params, OnComplete, OnError);
			});
		}

		this.GetFavoriteRooms = function(index, pageSize, onFavoriteRoomResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnFavoriteRoomResults = arguments[0].onFavoriteRoomResults;
				var params = VCUtils.jQuery.param({u: this.objId, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnFavoriteRoomResults = onFavoriteRoomResults;
				var params = VCUtils.jQuery.param({u: this.objId, index: arguments[0], pageSize: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetFavoriteRooms?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetRecentRooms = function(index, pageSize, onRecentRoomResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRecentRoomResults = arguments[0].onRecentRoomResults;
				var params = VCUtils.jQuery.param({u: this.objId, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnRecentRoomResults = onRecentRoomResults;
				var params = VCUtils.jQuery.param({u: this.objId, index: arguments[0], pageSize: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetRecentRooms?" + params, OnComplete, OnError);
			});
		}

		this.GetStats = function(stats) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({r: this.objId, stats: JSON.stringify(arguments[0].stats)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({r: this.objId, stats: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(stats&& response.data.stats)
						VCUtils.jQuery.extend(stats, response.data.stats);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserGetStats?" + params, OnComplete, OnError);
			});
		}

		this.Login = function(username, password, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onGetWebProxyCredentials) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
				this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = arguments[0].onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, username: arguments[0].username, password: arguments[0].password, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
			} else if (arguments.length === 10 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
				this.VidyoUserOnLoginComplete = onLoginComplete;
				this.VidyoUserOnLoggedOut = onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, username: arguments[0], password: arguments[1], host: arguments[2], port: arguments[3], serviceType: arguments[4]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLogin?" + params, OnComplete, OnError);
			});
		}

		this.LoginAsGuest = function(displayName, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onGetWebProxyCredentials) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
				this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = arguments[0].onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, displayName: arguments[0].displayName, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
			} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
				this.VidyoUserOnLoginComplete = onLoginComplete;
				this.VidyoUserOnLoggedOut = onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, displayName: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLoginAsGuest?" + params, OnComplete, OnError);
			});
		}

		this.LoginWithAccessToken = function(accessToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onGetWebProxyCredentials) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
				this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = arguments[0].onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, accessToken: arguments[0].accessToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
			} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
				this.VidyoUserOnLoginComplete = onLoginComplete;
				this.VidyoUserOnLoggedOut = onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, accessToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLoginWithAccessToken?" + params, OnComplete, OnError);
			});
		}

		this.LoginWithRefreshToken = function(refreshToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onGetWebProxyCredentials) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
				this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = arguments[0].onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, refreshToken: arguments[0].refreshToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
			} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
				this.VidyoUserOnLoginComplete = onLoginComplete;
				this.VidyoUserOnLoggedOut = onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, refreshToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLoginWithRefreshToken?" + params, OnComplete, OnError);
			});
		}

		this.LoginWithTenantToken = function(provisionToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onGetWebProxyCredentials) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
				this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = arguments[0].onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, provisionToken: arguments[0].provisionToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
			} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
				this.VidyoUserOnLoginComplete = onLoginComplete;
				this.VidyoUserOnLoggedOut = onLoggedOut;
				this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
				this.VidyoUserOnTokenReceived = onTokenReceived;
				this.VidyoUserOnGetWebProxyCredentials = onGetWebProxyCredentials;
				var params = VCUtils.jQuery.param({u: this.objId, provisionToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLoginWithTenantToken?" + params, OnComplete, OnError);
			});
		}

		this.Logout = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({user: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({user: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserLogout?" + params, OnComplete, OnError);
			});
		}

		this.RegisterCallEventListener = function(onCallCreatedByInvite) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnCallCreatedByInvite = arguments[0].onCallCreatedByInvite;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoUserOnCallCreatedByInvite = onCallCreatedByInvite;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserRegisterCallEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterContactEventListener = function(onUpdateSelf, onUpdateRosterContact, onRemoveRosterContact) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnUpdateSelf = arguments[0].onUpdateSelf;
				this.VidyoUserOnUpdateRosterContact = arguments[0].onUpdateRosterContact;
				this.VidyoUserOnRemoveRosterContact = arguments[0].onRemoveRosterContact;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
				this.VidyoUserOnUpdateSelf = onUpdateSelf;
				this.VidyoUserOnUpdateRosterContact = onUpdateRosterContact;
				this.VidyoUserOnRemoveRosterContact = onRemoveRosterContact;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserRegisterContactEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterLicenseEventListener = function(onLicenseReceived, onGetLicenseKey) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnLicenseReceived = arguments[0].onLicenseReceived;
				this.VidyoUserOnGetLicenseKey = arguments[0].onGetLicenseKey;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoUserOnLicenseReceived = onLicenseReceived;
				this.VidyoUserOnGetLicenseKey = onGetLicenseKey;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserRegisterLicenseEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RegisterRoomEventListener = function(onRoomCreatedByInvite) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomCreatedByInvite = arguments[0].onRoomCreatedByInvite;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
				this.VidyoUserOnRoomCreatedByInvite = onRoomCreatedByInvite;
				var params = VCUtils.jQuery.param({u: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserRegisterRoomEventListener?" + params, OnComplete, OnError);
			});
		}

		this.RemoveRosterContact = function(userId) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0].userId});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, userId: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserRemoveRosterContact?" + params, OnComplete, OnError);
			});
		}

		this.SearchConversationRooms = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchConversationRooms?" + params, OnComplete, OnError);
			});
		}

		this.SearchRooms = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchRooms?" + params, OnComplete, OnError);
			});
		}

		this.SearchRoomsWithName = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchRoomsWithName?" + params, OnComplete, OnError);
			});
		}

		this.SearchRoomsWithOwner = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchRoomsWithOwner?" + params, OnComplete, OnError);
			});
		}

		this.SearchRoomsWithSubject = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchRoomsWithSubject?" + params, OnComplete, OnError);
			});
		}

		this.SearchTopicRooms = function(searchText, index, pageSize, onRoomSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchTopicRooms?" + params, OnComplete, OnError);
			});
		}

		this.SearchUsers = function(searchText, index, pageSize, onUserSearchResults) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoUserOnUserSearchResults = arguments[0].onUserSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
			} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
				this.VidyoUserOnUserSearchResults = onUserSearchResults;
				var params = VCUtils.jQuery.param({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSearchUsers?" + params, OnComplete, OnError);
			});
		}

		this.SetCA = function(ca, caFilePath, caDir) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, ca: arguments[0].ca, caFilePath: arguments[0].caFilePath, caDir: arguments[0].caDir});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, ca: arguments[0], caFilePath: arguments[1], caDir: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSetCA?" + params, OnComplete, OnError);
			});
		}

		this.SetDisplayName = function(displayName) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, displayName: arguments[0].displayName});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, displayName: arguments[0]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSetDisplayName?" + params, OnComplete, OnError);
			});
		}

		this.SetWebProxyAddressCredentials = function(proxyAddress, username, password) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, proxyAddress: arguments[0].proxyAddress, username: arguments[0].username, password: arguments[0].password});
			} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, proxyAddress: arguments[0], username: arguments[1], password: arguments[2]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserSetWebProxyAddressCredentials?" + params, OnComplete, OnError);
			});
		}

		this.UpdatePresence = function(state, status) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({u: this.objId, state: arguments[0].state, status: arguments[0].status});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({u: this.objId, state: arguments[0], status: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoUserUpdatePresence?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.VidyoMeeting = function(){

		this.Destruct = function() {
			GetRequest("VidyoMeetingDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		this.AddAttendee = function(a) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0].a)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(a&& response.data.a)
						VCUtils.jQuery.extend(a, response.data.a);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingAddAttendee?" + params, OnComplete, OnError);
			});
		}

		this.GetAttendees = function(a) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify({"a": arguments[0].a})});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify({"a": arguments[0]})});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(a&& response.data.a)
						VCUtils.jQuery.extend(a, response.data.a);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetAttendees?" + params, OnComplete, OnError);
			});
		}

		this.GetAttendeesByRole = function(a, r) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify({"a": arguments[0].a}), r: arguments[0].r});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify({"a": arguments[0]}), r: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(a&& response.data.a)
						VCUtils.jQuery.extend(a, response.data.a);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetAttendeesByRole?" + params, OnComplete, OnError);
			});
		}

		this.GetBody = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetBody?" + params, OnComplete, OnError);
			});
		}

		this.GetEndDateTime = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetEndDateTime?" + params, OnComplete, OnError);
			});
		}

		this.GetId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetId?" + params, OnComplete, OnError);
			});
		}

		this.GetLocation = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetLocation?" + params, OnComplete, OnError);
			});
		}

		this.GetOwnerEmail = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetOwnerEmail?" + params, OnComplete, OnError);
			});
		}

		this.GetOwnerName = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetOwnerName?" + params, OnComplete, OnError);
			});
		}

		this.GetStartDateTime = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetStartDateTime?" + params, OnComplete, OnError);
			});
		}

		this.GetSubject = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetSubject?" + params, OnComplete, OnError);
			});
		}

		this.GetType = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetType?" + params, OnComplete, OnError);
			});
		}

		this.GetVidyoMeetingRoomId = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingGetVidyoMeetingRoomId?" + params, OnComplete, OnError);
			});
		}

		this.RemoveAttendee = function(a) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0].a)});
			} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0])});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(a&& response.data.a)
						VCUtils.jQuery.extend(a, response.data.a);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingRemoveAttendee?" + params, OnComplete, OnError);
			});
		}

		this.RespondToInvite = function(a, s) {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0].a), s: arguments[0].s});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
				var params = VCUtils.jQuery.param({m: this.objId, a: JSON.stringify(arguments[0]), s: arguments[1]});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					if(a&& response.data.a)
						VCUtils.jQuery.extend(a, response.data.a);
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingRespondToInvite?" + params, OnComplete, OnError);
			});
		}

		this.RetrieveBody = function() {
			var args = [].slice.apply(arguments);
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else if (arguments.length === 0){
				var params = VCUtils.jQuery.param({m: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			return new Promise(function(resolve, reject){
				function OnComplete(response) {
					resolve(response.data.retValue);
				}
				function OnError(response) {
					reject(Error(response));
				}
				GetRequest("VidyoMeetingRetrieveBody?" + params, OnComplete, OnError);
			});
		}

		return this;
	}

	this.CreateVidyoMeetingFeedback = function(attendeeAdded, attendeeRemoved) {
		var args = [].slice.apply(arguments);
		if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
			var params = VCUtils.jQuery.param({f: this.objId});
		} else {
			throw new Error('Invalid Parameters');
		}

		return new Promise(function(resolve, reject){
			function OnComplete(response) {
				vidyoMeetingFeedback = new contextObj.VidyoMeetingFeedback(response.data.VidyoMeetingFeedback);	// copy construct
				if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
					vidyoMeetingFeedback.VidyoMeetingFeedbackMeetingAttendeeAdded = args[0].attendeeAdded;
					vidyoMeetingFeedback.VidyoMeetingFeedbackMeetingAttendeeRemoved = args[0].attendeeRemoved;
				} else {
					vidyoMeetingFeedback.VidyoMeetingFeedbackMeetingAttendeeAdded = attendeeAdded;
					vidyoMeetingFeedback.VidyoMeetingFeedbackMeetingAttendeeRemoved = attendeeRemoved;
				}
				objects[vidyoMeetingFeedback.objId] = vidyoMeetingFeedback;
				resolve(vidyoMeetingFeedback);
			}
			function OnError(response) {
				reject(Error(response));
			}
			GetRequest("VidyoMeetingFeedbackConstruct?" + params, OnComplete, OnError);
		});
	}
	this.VidyoMeetingFeedback = function(attendeeAdded, attendeeRemoved) {
		if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoMeetingFeedback"){
			VCUtils.jQuery.extend(this, arguments[0]);	//	copy construct
		} else {
			if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
				this.VidyoMeetingFeedbackMeetingAttendeeAdded = arguments[0].attendeeAdded;
				this.VidyoMeetingFeedbackMeetingAttendeeRemoved = arguments[0].attendeeRemoved;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
				this.VidyoMeetingFeedbackMeetingAttendeeAdded = attendeeAdded;
				this.VidyoMeetingFeedbackMeetingAttendeeRemoved = attendeeRemoved;
				var params = VCUtils.jQuery.param({f: this.objId});
			} else {
				throw new Error('Invalid Parameters');
			}
			var response = GetRequest("VidyoMeetingFeedbackConstruct?" + params);
			if(response == null)
				throw new Error('No Response from VidyoClient');
			VCUtils.jQuery.extend(this, response.VidyoMeetingFeedback);
			objects[this.objId] = this;

		}

		this.Destruct = function() {
			GetRequest("VidyoMeetingFeedbackDestruct?" + VCUtils.jQuery.param({ obj: this.objId }), function(){}, function(){});
			delete objects[this.objId];
		}

		return this;
	}

	var callbacks = {

		VidyoCalendarManagerFeedbackCalendarCreated: function(response) {
			var VidyoCalendarManagerFeedbackObj = (response.VidyoCalendarManagerFeedback) ? objects[response.VidyoCalendarManagerFeedback.objId] : null;
			var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? new this.VidyoCalendar(null) : null;
			if(response.VidyoCalendar){
				VCUtils.jQuery.extend(VidyoCalendarObj, response.VidyoCalendar);
				objects[VidyoCalendarObj.objId] = VidyoCalendarObj;
			}
			var resultCodeObj = response.resultCode;
			var createTokenObj = response.createToken;
			if (VidyoCalendarManagerFeedbackObj && VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarCreated)
				VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarCreated(VidyoCalendarManagerObj,VidyoCalendarObj,resultCodeObj,createTokenObj);
			return GetRequest("VidyoCalendarManagerFeedbackCalendarCreatedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarManagerFeedback ? response.VidyoCalendarManagerFeedback.objId : 0, cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0, calendar: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarManagerFeedbackServiceDiscovery: function(response) {
			var VidyoCalendarManagerFeedbackObj = (response.VidyoCalendarManagerFeedback) ? objects[response.VidyoCalendarManagerFeedback.objId] : null;
			var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
			var tObj = response.t;
			var sObj = response.s;
			if (VidyoCalendarManagerFeedbackObj && VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackServiceDiscovery)
				VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackServiceDiscovery(VidyoCalendarManagerObj,tObj,sObj);
			return GetRequest("VidyoCalendarManagerFeedbackServiceDiscoveryComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarManagerFeedback ? response.VidyoCalendarManagerFeedback.objId : 0, cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarManagerFeedbackUninitialized: function(response) {
			var VidyoCalendarManagerFeedbackObj = (response.VidyoCalendarManagerFeedback) ? objects[response.VidyoCalendarManagerFeedback.objId] : null;
			var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
			if (VidyoCalendarManagerFeedbackObj && VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackUninitialized)
				VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackUninitialized(VidyoCalendarManagerObj);
			return GetRequest("VidyoCalendarManagerFeedbackUninitializedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarManagerFeedback ? response.VidyoCalendarManagerFeedback.objId : 0, cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackConnectResult: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var resultObj = response.result;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackConnectResult)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackConnectResult(VidyoCalendarObj,resultObj);
			return GetRequest("VidyoCalendarFeedbackConnectResultComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackDisconnected: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var resultObj = response.result;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackDisconnected)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackDisconnected(VidyoCalendarObj,resultObj);
			return GetRequest("VidyoCalendarFeedbackDisconnectedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackGetMeetingsResult: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var searchResultObj = response.searchResult;
			var meetingsObj = response.meetings;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetMeetingsResult)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetMeetingsResult(VidyoCalendarObj,searchResultObj,meetingsObj);
			return GetRequest("VidyoCalendarFeedbackGetMeetingsResultComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingCreated: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? new this.VidyoMeeting(null) : null;
			if(response.VidyoMeeting){
				VCUtils.jQuery.extend(VidyoMeetingObj, response.VidyoMeeting);
				objects[VidyoMeetingObj.objId] = VidyoMeetingObj;
			}
			var rObj = response.r;
			var createdTokenObj = response.createdToken;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreated)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreated(VidyoCalendarObj,VidyoMeetingObj,rObj,createdTokenObj);
			return GetRequest("VidyoCalendarFeedbackMeetingCreatedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingCreatedByService: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? new this.VidyoMeeting(null) : null;
			if(response.VidyoMeeting){
				VCUtils.jQuery.extend(VidyoMeetingObj, response.VidyoMeeting);
				objects[VidyoMeetingObj.objId] = VidyoMeetingObj;
			}
			var VidyoMeetingAttendeeObj = (response.VidyoMeetingAttendee) ? response.VidyoMeetingAttendee : null;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedByService)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedByService(VidyoCalendarObj,VidyoMeetingObj,VidyoMeetingAttendeeObj);
			return GetRequest("VidyoCalendarFeedbackMeetingCreatedByServiceComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingEventNotification: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingEventNotification)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingEventNotification(VidyoCalendarObj,VidyoMeetingObj);
			return GetRequest("VidyoCalendarFeedbackMeetingEventNotificationComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingRemoved: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = objects[response.VidyoMeeting.objId];
			delete objects[response.VidyoMeeting.objId];
			var rObj = response.r;
			var removedTokenObj = response.removedToken;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemoved)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemoved(VidyoCalendarObj,VidyoMeetingObj,rObj,removedTokenObj);
			return GetRequest("VidyoCalendarFeedbackMeetingRemovedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingRemovedByService: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = objects[response.VidyoMeeting.objId];
			delete objects[response.VidyoMeeting.objId];
			var rObj = response.r;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemovedByService)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemovedByService(VidyoCalendarObj,VidyoMeetingObj,rObj);
			return GetRequest("VidyoCalendarFeedbackMeetingRemovedByServiceComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingUpdated: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
			var rObj = response.r;
			var updatedTokenObj = response.updatedToken;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdated)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdated(VidyoCalendarObj,VidyoMeetingObj,rObj,updatedTokenObj);
			return GetRequest("VidyoCalendarFeedbackMeetingUpdatedComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoCalendarFeedbackMeetingUpdatedByService: function(response) {
			var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
			var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
			var rObj = response.r;
			if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdatedByService)
				VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdatedByService(VidyoCalendarObj,VidyoMeetingObj,rObj);
			return GetRequest("VidyoCalendarFeedbackMeetingUpdatedByServiceComplete?" + VCUtils.jQuery.param({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnAvailableResourcesChanged: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var cpuEncodeObj = response.cpuEncode;
			var cpuDecodeObj = response.cpuDecode;
			var bandwidthSendObj = response.bandwidthSend;
			var bandwidthReceiveObj = response.bandwidthReceive;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnAvailableResourcesChanged)
				VidyoConnectorObj.VidyoConnectorOnAvailableResourcesChanged(cpuEncodeObj,cpuDecodeObj,bandwidthSendObj,bandwidthReceiveObj);
			return GetRequest("VidyoConnectorOnAvailableResourcesChangedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnChatMessageReceived: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnChatMessageReceived)
				VidyoConnectorObj.VidyoConnectorOnChatMessageReceived(VidyoParticipantObj,VidyoChatMessageObj);
			return GetRequest("VidyoConnectorOnChatMessageReceivedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnDisconnected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var reasonObj = response.reason;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnDisconnected)
				VidyoConnectorObj.VidyoConnectorOnDisconnected(reasonObj);
			return GetRequest("VidyoConnectorOnDisconnectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnDynamicParticipantChanged: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var participantsObj = response.participants;
			var camerasObj = response.cameras;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnDynamicParticipantChanged)
				VidyoConnectorObj.VidyoConnectorOnDynamicParticipantChanged(participantsObj,camerasObj);
			return GetRequest("VidyoConnectorOnDynamicParticipantChangedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnFailure: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var reasonObj = response.reason;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnFailure)
				VidyoConnectorObj.VidyoConnectorOnFailure(reasonObj);
			return GetRequest("VidyoConnectorOnFailureComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalCameraAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalCameraObj = new this.VidyoLocalCamera(null);
			VCUtils.jQuery.extend(VidyoLocalCameraObj, response.VidyoLocalCamera);
			objects[VidyoLocalCameraObj.objId] = VidyoLocalCameraObj;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraAdded)
				VidyoConnectorObj.VidyoConnectorOnLocalCameraAdded(VidyoLocalCameraObj);
			return GetRequest("VidyoConnectorOnLocalCameraAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalCameraRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalCameraObj = objects[response.VidyoLocalCamera.objId];
			delete objects[response.VidyoLocalCamera.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraRemoved)
				VidyoConnectorObj.VidyoConnectorOnLocalCameraRemoved(VidyoLocalCameraObj);
			return GetRequest("VidyoConnectorOnLocalCameraRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalCameraSelected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraSelected)
				VidyoConnectorObj.VidyoConnectorOnLocalCameraSelected(VidyoLocalCameraObj);
			return GetRequest("VidyoConnectorOnLocalCameraSelectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalCameraStateUpdated: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
			var stateObj = response.state;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraStateUpdated)
				VidyoConnectorObj.VidyoConnectorOnLocalCameraStateUpdated(VidyoLocalCameraObj,stateObj);
			return GetRequest("VidyoConnectorOnLocalCameraStateUpdatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMicrophoneAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMicrophoneObj = new this.VidyoLocalMicrophone(null);
			VCUtils.jQuery.extend(VidyoLocalMicrophoneObj, response.VidyoLocalMicrophone);
			objects[VidyoLocalMicrophoneObj.objId] = VidyoLocalMicrophoneObj;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneAdded)
				VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneAdded(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoConnectorOnLocalMicrophoneAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMicrophoneRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMicrophoneObj = objects[response.VidyoLocalMicrophone.objId];
			delete objects[response.VidyoLocalMicrophone.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneRemoved)
				VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneRemoved(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoConnectorOnLocalMicrophoneRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMicrophoneSelected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneSelected)
				VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneSelected(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoConnectorOnLocalMicrophoneSelectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMicrophoneStateUpdated: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
			var stateObj = response.state;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneStateUpdated)
				VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneStateUpdated(VidyoLocalMicrophoneObj,stateObj);
			return GetRequest("VidyoConnectorOnLocalMicrophoneStateUpdatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMonitorAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMonitorObj = new this.VidyoLocalMonitor(null);
			VCUtils.jQuery.extend(VidyoLocalMonitorObj, response.VidyoLocalMonitor);
			objects[VidyoLocalMonitorObj.objId] = VidyoLocalMonitorObj;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorAdded)
				VidyoConnectorObj.VidyoConnectorOnLocalMonitorAdded(VidyoLocalMonitorObj);
			return GetRequest("VidyoConnectorOnLocalMonitorAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, monitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMonitorRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMonitorObj = objects[response.VidyoLocalMonitor.objId];
			delete objects[response.VidyoLocalMonitor.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorRemoved)
				VidyoConnectorObj.VidyoConnectorOnLocalMonitorRemoved(VidyoLocalMonitorObj);
			return GetRequest("VidyoConnectorOnLocalMonitorRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, monitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMonitorSelected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorSelected)
				VidyoConnectorObj.VidyoConnectorOnLocalMonitorSelected(VidyoLocalMonitorObj);
			return GetRequest("VidyoConnectorOnLocalMonitorSelectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, monitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalMonitorStateUpdated: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
			var stateObj = response.state;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorStateUpdated)
				VidyoConnectorObj.VidyoConnectorOnLocalMonitorStateUpdated(VidyoLocalMonitorObj,stateObj);
			return GetRequest("VidyoConnectorOnLocalMonitorStateUpdatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, monitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalSpeakerAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalSpeakerObj = new this.VidyoLocalSpeaker(null);
			VCUtils.jQuery.extend(VidyoLocalSpeakerObj, response.VidyoLocalSpeaker);
			objects[VidyoLocalSpeakerObj.objId] = VidyoLocalSpeakerObj;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerAdded)
				VidyoConnectorObj.VidyoConnectorOnLocalSpeakerAdded(VidyoLocalSpeakerObj);
			return GetRequest("VidyoConnectorOnLocalSpeakerAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, speaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalSpeakerRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalSpeakerObj = objects[response.VidyoLocalSpeaker.objId];
			delete objects[response.VidyoLocalSpeaker.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerRemoved)
				VidyoConnectorObj.VidyoConnectorOnLocalSpeakerRemoved(VidyoLocalSpeakerObj);
			return GetRequest("VidyoConnectorOnLocalSpeakerRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, speaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalSpeakerSelected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerSelected)
				VidyoConnectorObj.VidyoConnectorOnLocalSpeakerSelected(VidyoLocalSpeakerObj);
			return GetRequest("VidyoConnectorOnLocalSpeakerSelectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, speaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalSpeakerStateUpdated: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
			var stateObj = response.state;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerStateUpdated)
				VidyoConnectorObj.VidyoConnectorOnLocalSpeakerStateUpdated(VidyoLocalSpeakerObj,stateObj);
			return GetRequest("VidyoConnectorOnLocalSpeakerStateUpdatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, speaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalWindowShareAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalWindowShareObj = new this.VidyoLocalWindowShare(null);
			VCUtils.jQuery.extend(VidyoLocalWindowShareObj, response.VidyoLocalWindowShare);
			objects[VidyoLocalWindowShareObj.objId] = VidyoLocalWindowShareObj;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareAdded)
				VidyoConnectorObj.VidyoConnectorOnLocalWindowShareAdded(VidyoLocalWindowShareObj);
			return GetRequest("VidyoConnectorOnLocalWindowShareAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalWindowShareRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalWindowShareObj = objects[response.VidyoLocalWindowShare.objId];
			delete objects[response.VidyoLocalWindowShare.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareRemoved)
				VidyoConnectorObj.VidyoConnectorOnLocalWindowShareRemoved(VidyoLocalWindowShareObj);
			return GetRequest("VidyoConnectorOnLocalWindowShareRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalWindowShareSelected: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareSelected)
				VidyoConnectorObj.VidyoConnectorOnLocalWindowShareSelected(VidyoLocalWindowShareObj);
			return GetRequest("VidyoConnectorOnLocalWindowShareSelectedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLocalWindowShareStateUpdated: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			var stateObj = response.state;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareStateUpdated)
				VidyoConnectorObj.VidyoConnectorOnLocalWindowShareStateUpdated(VidyoLocalWindowShareObj,stateObj);
			return GetRequest("VidyoConnectorOnLocalWindowShareStateUpdatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLog: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoLogRecordObj = (response.VidyoLogRecord) ? response.VidyoLogRecord : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLog)
				VidyoConnectorObj.VidyoConnectorOnLog(VidyoLogRecordObj);
			return GetRequest("VidyoConnectorOnLogComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnLoudestParticipantChanged: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var audioOnlyObj = response.audioOnly;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLoudestParticipantChanged)
				VidyoConnectorObj.VidyoConnectorOnLoudestParticipantChanged(VidyoParticipantObj,audioOnlyObj);
			return GetRequest("VidyoConnectorOnLoudestParticipantChangedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnMaxRemoteSourcesChanged: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var maxRemoteSourcesObj = response.maxRemoteSources;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnMaxRemoteSourcesChanged)
				VidyoConnectorObj.VidyoConnectorOnMaxRemoteSourcesChanged(maxRemoteSourcesObj);
			return GetRequest("VidyoConnectorOnMaxRemoteSourcesChangedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnParticipantJoined: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? new this.VidyoParticipant(null) : null;
			if(response.VidyoParticipant){
				VCUtils.jQuery.extend(VidyoParticipantObj, response.VidyoParticipant);
				objects[VidyoParticipantObj.objId] = VidyoParticipantObj;
			}
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnParticipantJoined)
				VidyoConnectorObj.VidyoConnectorOnParticipantJoined(VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnParticipantJoinedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnParticipantLeft: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoParticipantObj = objects[response.VidyoParticipant.objId];
			delete objects[response.VidyoParticipant.objId];
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnParticipantLeft)
				VidyoConnectorObj.VidyoConnectorOnParticipantLeft(VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnParticipantLeftComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteCameraAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteCameraObj = new this.VidyoRemoteCamera(null);
			VCUtils.jQuery.extend(VidyoRemoteCameraObj, response.VidyoRemoteCamera);
			objects[VidyoRemoteCameraObj.objId] = VidyoRemoteCameraObj;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraAdded)
				VidyoConnectorObj.VidyoConnectorOnRemoteCameraAdded(VidyoRemoteCameraObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteCameraAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteCameraRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteCameraObj = objects[response.VidyoRemoteCamera.objId];
			delete objects[response.VidyoRemoteCamera.objId];
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraRemoved)
				VidyoConnectorObj.VidyoConnectorOnRemoteCameraRemoved(VidyoRemoteCameraObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteCameraRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, camera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteMicrophoneAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteMicrophoneObj = new this.VidyoRemoteMicrophone(null);
			VCUtils.jQuery.extend(VidyoRemoteMicrophoneObj, response.VidyoRemoteMicrophone);
			objects[VidyoRemoteMicrophoneObj.objId] = VidyoRemoteMicrophoneObj;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneAdded)
				VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneAdded(VidyoRemoteMicrophoneObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteMicrophoneAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteMicrophoneRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteMicrophoneObj = objects[response.VidyoRemoteMicrophone.objId];
			delete objects[response.VidyoRemoteMicrophone.objId];
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneRemoved)
				VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneRemoved(VidyoRemoteMicrophoneObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteMicrophoneRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, microphone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteWindowShareAdded: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteWindowShareObj = new this.VidyoRemoteWindowShare(null);
			VCUtils.jQuery.extend(VidyoRemoteWindowShareObj, response.VidyoRemoteWindowShare);
			objects[VidyoRemoteWindowShareObj.objId] = VidyoRemoteWindowShareObj;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareAdded)
				VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareAdded(VidyoRemoteWindowShareObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteWindowShareAddedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnRemoteWindowShareRemoved: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			var VidyoRemoteWindowShareObj = objects[response.VidyoRemoteWindowShare.objId];
			delete objects[response.VidyoRemoteWindowShare.objId];
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareRemoved)
				VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareRemoved(VidyoRemoteWindowShareObj,VidyoParticipantObj);
			return GetRequest("VidyoConnectorOnRemoteWindowShareRemovedComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, window: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoConnectorOnSuccess: function(response) {
			var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
			if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnSuccess)
				VidyoConnectorObj.VidyoConnectorOnSuccess();
			return GetRequest("VidyoConnectorOnSuccessComplete?" + VCUtils.jQuery.param({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
		},
		VidyoGatewayOnDisconnected: function(response) {
			var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
			var reasonObj = response.reason;
			if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnDisconnected)
				VidyoGatewayObj.VidyoGatewayOnDisconnected(reasonObj);
			return GetRequest("VidyoGatewayOnDisconnectedComplete?" + VCUtils.jQuery.param({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
		},
		VidyoGatewayOnFailure: function(response) {
			var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
			var reasonObj = response.reason;
			if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnFailure)
				VidyoGatewayObj.VidyoGatewayOnFailure(reasonObj);
			return GetRequest("VidyoGatewayOnFailureComplete?" + VCUtils.jQuery.param({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
		},
		VidyoGatewayOnSuccess: function(response) {
			var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
			if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnSuccess)
				VidyoGatewayObj.VidyoGatewayOnSuccess();
			return GetRequest("VidyoGatewayOnSuccessComplete?" + VCUtils.jQuery.param({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
		},
		VidyoLocalMonitorOnPreviewDataUriComplete: function(response) {
			var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
			var videoFrameObj = response.videoFrame;
			var stateObj = response.state;
			if (VidyoLocalMonitorObj && VidyoLocalMonitorObj.VidyoLocalMonitorOnPreviewDataUriComplete)
				VidyoLocalMonitorObj.VidyoLocalMonitorOnPreviewDataUriComplete(videoFrameObj,stateObj);
			return GetRequest("VidyoLocalMonitorOnPreviewDataUriCompleteComplete?" + VCUtils.jQuery.param({ w: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoLocalWindowShareOnApplicationIconDataUriComplete: function(response) {
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			var iconObj = response.icon;
			if (VidyoLocalWindowShareObj && VidyoLocalWindowShareObj.VidyoLocalWindowShareOnApplicationIconDataUriComplete)
				VidyoLocalWindowShareObj.VidyoLocalWindowShareOnApplicationIconDataUriComplete(iconObj);
			return GetRequest("VidyoLocalWindowShareOnApplicationIconDataUriCompleteComplete?" + VCUtils.jQuery.param({ w: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoLocalWindowShareOnPreviewDataUriComplete: function(response) {
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			var videoFrameObj = response.videoFrame;
			var stateObj = response.state;
			if (VidyoLocalWindowShareObj && VidyoLocalWindowShareObj.VidyoLocalWindowShareOnPreviewDataUriComplete)
				VidyoLocalWindowShareObj.VidyoLocalWindowShareOnPreviewDataUriComplete(videoFrameObj,stateObj);
			return GetRequest("VidyoLocalWindowShareOnPreviewDataUriCompleteComplete?" + VCUtils.jQuery.param({ w: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnEnded: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var reasonObj = response.reason;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnEnded)
				VidyoCallObj.VidyoCallOnEnded(VidyoParticipantObj,reasonObj);
			return GetRequest("VidyoCallOnEndedComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0, p: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnInitiated: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var resultObj = response.result;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnInitiated)
				VidyoCallObj.VidyoCallOnInitiated(resultObj,VidyoParticipantObj);
			return GetRequest("VidyoCallOnInitiatedComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0, p: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnMessageAcknowledged: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageAcknowledged)
				VidyoCallObj.VidyoCallOnMessageAcknowledged(VidyoChatMessageObj);
			return GetRequest("VidyoCallOnMessageAcknowledgedComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnMessageRead: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var messageIdObj = response.messageId;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageRead)
				VidyoCallObj.VidyoCallOnMessageRead(VidyoParticipantObj,messageIdObj);
			return GetRequest("VidyoCallOnMessageReadComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnMessageReceived: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageReceived)
				VidyoCallObj.VidyoCallOnMessageReceived(VidyoChatMessageObj);
			return GetRequest("VidyoCallOnMessageReceivedComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnMessageTypingIndication: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var typingIndicationObj = response.typingIndication;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageTypingIndication)
				VidyoCallObj.VidyoCallOnMessageTypingIndication(VidyoParticipantObj,typingIndicationObj);
			return GetRequest("VidyoCallOnMessageTypingIndicationComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoCallOnSetSubject: function(response) {
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var subjectObj = response.subject;
			if (VidyoCallObj && VidyoCallObj.VidyoCallOnSetSubject)
				VidyoCallObj.VidyoCallOnSetSubject(subjectObj);
			return GetRequest("VidyoCallOnSetSubjectComplete?" + VCUtils.jQuery.param({ c: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalCameraAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalCameraObj = new this.VidyoLocalCamera(null);
			VCUtils.jQuery.extend(VidyoLocalCameraObj, response.VidyoLocalCamera);
			objects[VidyoLocalCameraObj.objId] = VidyoLocalCameraObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalCameraAdded(VidyoLocalCameraObj);
			return GetRequest("VidyoEndpointOnLocalCameraAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalCameraRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalCameraObj = objects[response.VidyoLocalCamera.objId];
			delete objects[response.VidyoLocalCamera.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalCameraRemoved(VidyoLocalCameraObj);
			return GetRequest("VidyoEndpointOnLocalCameraRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalCameraSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalCameraSelected(VidyoLocalCameraObj);
			return GetRequest("VidyoEndpointOnLocalCameraSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalCameraStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalCameraStateUpdated(VidyoLocalCameraObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalCameraStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMicrophoneAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMicrophoneObj = new this.VidyoLocalMicrophone(null);
			VCUtils.jQuery.extend(VidyoLocalMicrophoneObj, response.VidyoLocalMicrophone);
			objects[VidyoLocalMicrophoneObj.objId] = VidyoLocalMicrophoneObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneAdded(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoEndpointOnLocalMicrophoneAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMicrophoneRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMicrophoneObj = objects[response.VidyoLocalMicrophone.objId];
			delete objects[response.VidyoLocalMicrophone.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneRemoved(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoEndpointOnLocalMicrophoneRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMicrophoneSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneSelected(VidyoLocalMicrophoneObj);
			return GetRequest("VidyoEndpointOnLocalMicrophoneSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMicrophoneStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneStateUpdated(VidyoLocalMicrophoneObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalMicrophoneStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMonitorAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMonitorObj = new this.VidyoLocalMonitor(null);
			VCUtils.jQuery.extend(VidyoLocalMonitorObj, response.VidyoLocalMonitor);
			objects[VidyoLocalMonitorObj.objId] = VidyoLocalMonitorObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalMonitorAdded(VidyoLocalMonitorObj);
			return GetRequest("VidyoEndpointOnLocalMonitorAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMonitorRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMonitorObj = objects[response.VidyoLocalMonitor.objId];
			delete objects[response.VidyoLocalMonitor.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalMonitorRemoved(VidyoLocalMonitorObj);
			return GetRequest("VidyoEndpointOnLocalMonitorRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMonitorSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalMonitorSelected(VidyoLocalMonitorObj);
			return GetRequest("VidyoEndpointOnLocalMonitorSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalMonitorStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalMonitorStateUpdated(VidyoLocalMonitorObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalMonitorStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalRendererAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalRendererObj = new this.VidyoLocalRenderer(null);
			VCUtils.jQuery.extend(VidyoLocalRendererObj, response.VidyoLocalRenderer);
			objects[VidyoLocalRendererObj.objId] = VidyoLocalRendererObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalRendererAdded(VidyoLocalRendererObj);
			return GetRequest("VidyoEndpointOnLocalRendererAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalRendererRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalRendererObj = objects[response.VidyoLocalRenderer.objId];
			delete objects[response.VidyoLocalRenderer.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalRendererRemoved(VidyoLocalRendererObj);
			return GetRequest("VidyoEndpointOnLocalRendererRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalRendererSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalRendererObj = (response.VidyoLocalRenderer) ? objects[response.VidyoLocalRenderer.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalRendererSelected(VidyoLocalRendererObj);
			return GetRequest("VidyoEndpointOnLocalRendererSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalRendererStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalRendererObj = (response.VidyoLocalRenderer) ? objects[response.VidyoLocalRenderer.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalRendererStateUpdated(VidyoLocalRendererObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalRendererStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalSpeakerAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalSpeakerObj = new this.VidyoLocalSpeaker(null);
			VCUtils.jQuery.extend(VidyoLocalSpeakerObj, response.VidyoLocalSpeaker);
			objects[VidyoLocalSpeakerObj.objId] = VidyoLocalSpeakerObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalSpeakerAdded(VidyoLocalSpeakerObj);
			return GetRequest("VidyoEndpointOnLocalSpeakerAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalSpeakerRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalSpeakerObj = objects[response.VidyoLocalSpeaker.objId];
			delete objects[response.VidyoLocalSpeaker.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalSpeakerRemoved(VidyoLocalSpeakerObj);
			return GetRequest("VidyoEndpointOnLocalSpeakerRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalSpeakerSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalSpeakerSelected(VidyoLocalSpeakerObj);
			return GetRequest("VidyoEndpointOnLocalSpeakerSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalSpeakerStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalSpeakerStateUpdated(VidyoLocalSpeakerObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalSpeakerStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalWindowShareAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalWindowShareObj = new this.VidyoLocalWindowShare(null);
			VCUtils.jQuery.extend(VidyoLocalWindowShareObj, response.VidyoLocalWindowShare);
			objects[VidyoLocalWindowShareObj.objId] = VidyoLocalWindowShareObj;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareAdded)
				VidyoEndpointObj.VidyoEndpointOnLocalWindowShareAdded(VidyoLocalWindowShareObj);
			return GetRequest("VidyoEndpointOnLocalWindowShareAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalWindowShareRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalWindowShareObj = objects[response.VidyoLocalWindowShare.objId];
			delete objects[response.VidyoLocalWindowShare.objId];
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareRemoved)
				VidyoEndpointObj.VidyoEndpointOnLocalWindowShareRemoved(VidyoLocalWindowShareObj);
			return GetRequest("VidyoEndpointOnLocalWindowShareRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalWindowShareSelected: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareSelected)
				VidyoEndpointObj.VidyoEndpointOnLocalWindowShareSelected(VidyoLocalWindowShareObj);
			return GetRequest("VidyoEndpointOnLocalWindowShareSelectedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLocalWindowShareStateUpdated: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
			var stateObj = response.state;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareStateUpdated)
				VidyoEndpointObj.VidyoEndpointOnLocalWindowShareStateUpdated(VidyoLocalWindowShareObj,stateObj);
			return GetRequest("VidyoEndpointOnLocalWindowShareStateUpdatedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLog: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoLogRecordObj = (response.VidyoLogRecord) ? response.VidyoLogRecord : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLog)
				VidyoEndpointObj.VidyoEndpointOnLog(VidyoLogRecordObj);
			return GetRequest("VidyoEndpointOnLogComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnLogCompressionComplete: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var compressedFileNameObj = response.compressedFileName;
			var resultObj = response.result;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLogCompressionComplete)
				VidyoEndpointObj.VidyoEndpointOnLogCompressionComplete(compressedFileNameObj,resultObj);
			return GetRequest("VidyoEndpointOnLogCompressionCompleteComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteCameraAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteCameraObj = new this.VidyoRemoteCamera(null);
			VCUtils.jQuery.extend(VidyoRemoteCameraObj, response.VidyoRemoteCamera);
			objects[VidyoRemoteCameraObj.objId] = VidyoRemoteCameraObj;
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraAdded)
				VidyoEndpointObj.VidyoEndpointOnRemoteCameraAdded(VidyoRemoteCameraObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteCameraAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteCameraRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteCameraObj = objects[response.VidyoRemoteCamera.objId];
			delete objects[response.VidyoRemoteCamera.objId];
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraRemoved)
				VidyoEndpointObj.VidyoEndpointOnRemoteCameraRemoved(VidyoRemoteCameraObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteCameraRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteMicrophoneAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteMicrophoneObj = new this.VidyoRemoteMicrophone(null);
			VCUtils.jQuery.extend(VidyoRemoteMicrophoneObj, response.VidyoRemoteMicrophone);
			objects[VidyoRemoteMicrophoneObj.objId] = VidyoRemoteMicrophoneObj;
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneAdded)
				VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneAdded(VidyoRemoteMicrophoneObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteMicrophoneAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteMicrophoneRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteMicrophoneObj = objects[response.VidyoRemoteMicrophone.objId];
			delete objects[response.VidyoRemoteMicrophone.objId];
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneRemoved)
				VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneRemoved(VidyoRemoteMicrophoneObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteMicrophoneRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteRendererAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteRendererObj = new this.VidyoRemoteRenderer(null);
			VCUtils.jQuery.extend(VidyoRemoteRendererObj, response.VidyoRemoteRenderer);
			objects[VidyoRemoteRendererObj.objId] = VidyoRemoteRendererObj;
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteRendererAdded)
				VidyoEndpointObj.VidyoEndpointOnRemoteRendererAdded(VidyoRemoteRendererObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
			return GetRequest("VidyoEndpointOnRemoteRendererAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteRendererRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteRendererObj = objects[response.VidyoRemoteRenderer.objId];
			delete objects[response.VidyoRemoteRenderer.objId];
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteRendererRemoved)
				VidyoEndpointObj.VidyoEndpointOnRemoteRendererRemoved(VidyoRemoteRendererObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
			return GetRequest("VidyoEndpointOnRemoteRendererRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteSpeakerAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteSpeakerObj = new this.VidyoRemoteSpeaker(null);
			VCUtils.jQuery.extend(VidyoRemoteSpeakerObj, response.VidyoRemoteSpeaker);
			objects[VidyoRemoteSpeakerObj.objId] = VidyoRemoteSpeakerObj;
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerAdded)
				VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerAdded(VidyoRemoteSpeakerObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
			return GetRequest("VidyoEndpointOnRemoteSpeakerAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteSpeakerRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteSpeakerObj = objects[response.VidyoRemoteSpeaker.objId];
			delete objects[response.VidyoRemoteSpeaker.objId];
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerRemoved)
				VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerRemoved(VidyoRemoteSpeakerObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
			return GetRequest("VidyoEndpointOnRemoteSpeakerRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteWindowShareAdded: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteWindowShareObj = new this.VidyoRemoteWindowShare(null);
			VCUtils.jQuery.extend(VidyoRemoteWindowShareObj, response.VidyoRemoteWindowShare);
			objects[VidyoRemoteWindowShareObj.objId] = VidyoRemoteWindowShareObj;
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareAdded)
				VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareAdded(VidyoRemoteWindowShareObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteWindowShareAddedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoEndpointOnRemoteWindowShareRemoved: function(response) {
			var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
			var VidyoRemoteWindowShareObj = objects[response.VidyoRemoteWindowShare.objId];
			delete objects[response.VidyoRemoteWindowShare.objId];
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareRemoved)
				VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareRemoved(VidyoRemoteWindowShareObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
			return GetRequest("VidyoEndpointOnRemoteWindowShareRemovedComplete?" + VCUtils.jQuery.param({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnAvailableResourcesChanged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var cpuEncodeObj = response.cpuEncode;
			var cpuDecodeObj = response.cpuDecode;
			var bandwidthSendObj = response.bandwidthSend;
			var bandwidthReceiveObj = response.bandwidthReceive;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnAvailableResourcesChanged)
				VidyoRoomObj.VidyoRoomOnAvailableResourcesChanged(cpuEncodeObj,cpuDecodeObj,bandwidthSendObj,bandwidthReceiveObj);
			return GetRequest("VidyoRoomOnAvailableResourcesChangedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnDeleteResult: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnDeleteResult)
				VidyoRoomObj.VidyoRoomOnDeleteResult(resultObj);
			return GetRequest("VidyoRoomOnDeleteResultComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnDynamicParticipantChanged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var dynamicSelectedParticipantsObj = response.dynamicSelectedParticipants;
			var dynamicSelectedCamerasObj = response.dynamicSelectedCameras;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnDynamicParticipantChanged)
				VidyoRoomObj.VidyoRoomOnDynamicParticipantChanged(dynamicSelectedParticipantsObj,dynamicSelectedCamerasObj);
			return GetRequest("VidyoRoomOnDynamicParticipantChangedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnEntered: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnEntered)
				VidyoRoomObj.VidyoRoomOnEntered(resultObj);
			return GetRequest("VidyoRoomOnEnteredComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnExited: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var reasonObj = response.reason;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnExited)
				VidyoRoomObj.VidyoRoomOnExited(reasonObj);
			return GetRequest("VidyoRoomOnExitedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnGetHistoryResults: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var recordsObj = response.records;
			var historySizeObj = response.historySize;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetHistoryResults)
				VidyoRoomObj.VidyoRoomOnGetHistoryResults(recordsObj,historySizeObj,resultObj);
			return GetRequest("VidyoRoomOnGetHistoryResultsComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnGetRoomPropertiesResult: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var resultObj = response.result;
			var VidyoRoomPropertiesObj = (response.VidyoRoomProperties) ? response.VidyoRoomProperties : null;
			if (VidyoRoomPropertiesObj && VidyoRoomPropertiesObj.VidyoRoomOnGetRoomPropertiesResult)
				VidyoRoomPropertiesObj.VidyoRoomOnGetRoomPropertiesResult(resultObj,VidyoRoomPropertiesObj);
			return GetRequest("VidyoRoomOnGetRoomPropertiesResultComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnLoudestParticipantChanged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var isAudioOnlyObj = response.isAudioOnly;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnLoudestParticipantChanged)
				VidyoRoomObj.VidyoRoomOnLoudestParticipantChanged(VidyoParticipantObj,isAudioOnlyObj);
			return GetRequest("VidyoRoomOnLoudestParticipantChangedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMaxRemoteSourcesChanged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var maxRemoteSourcesObj = response.maxRemoteSources;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMaxRemoteSourcesChanged)
				VidyoRoomObj.VidyoRoomOnMaxRemoteSourcesChanged(maxRemoteSourcesObj);
			return GetRequest("VidyoRoomOnMaxRemoteSourcesChangedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMediaDisabled: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var reasonObj = response.reason;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaDisabled)
				VidyoRoomObj.VidyoRoomOnMediaDisabled(reasonObj);
			return GetRequest("VidyoRoomOnMediaDisabledComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMediaEnabled: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaEnabled)
				VidyoRoomObj.VidyoRoomOnMediaEnabled();
			return GetRequest("VidyoRoomOnMediaEnabledComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMediaFailed: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var reasonObj = response.reason;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaFailed)
				VidyoRoomObj.VidyoRoomOnMediaFailed(reasonObj);
			return GetRequest("VidyoRoomOnMediaFailedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMediaRouteAcquired: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaRouteAcquired)
				VidyoRoomObj.VidyoRoomOnMediaRouteAcquired();
			return GetRequest("VidyoRoomOnMediaRouteAcquiredComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMessageAcknowledged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageAcknowledged)
				VidyoRoomObj.VidyoRoomOnMessageAcknowledged(VidyoChatMessageObj);
			return GetRequest("VidyoRoomOnMessageAcknowledgedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMessageRead: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var messageIdObj = response.messageId;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageRead)
				VidyoRoomObj.VidyoRoomOnMessageRead(VidyoParticipantObj,messageIdObj);
			return GetRequest("VidyoRoomOnMessageReadComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMessageReceived: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageReceived)
				VidyoRoomObj.VidyoRoomOnMessageReceived(VidyoParticipantObj,VidyoChatMessageObj);
			return GetRequest("VidyoRoomOnMessageReceivedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMessageSearchResults: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var searchTextObj = response.searchText;
			var recordsObj = response.records;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageSearchResults)
				VidyoRoomObj.VidyoRoomOnMessageSearchResults(searchTextObj,recordsObj,resultObj);
			return GetRequest("VidyoRoomOnMessageSearchResultsComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnMessageTypingIndication: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
			var typingIndicationObj = response.typingIndication;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageTypingIndication)
				VidyoRoomObj.VidyoRoomOnMessageTypingIndication(VidyoParticipantObj,typingIndicationObj);
			return GetRequest("VidyoRoomOnMessageTypingIndicationComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnParticipantJoined: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = (response.VidyoParticipant) ? new this.VidyoParticipant(null) : null;
			if(response.VidyoParticipant){
				VCUtils.jQuery.extend(VidyoParticipantObj, response.VidyoParticipant);
				objects[VidyoParticipantObj.objId] = VidyoParticipantObj;
			}
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnParticipantJoined)
				VidyoRoomObj.VidyoRoomOnParticipantJoined(VidyoParticipantObj);
			return GetRequest("VidyoRoomOnParticipantJoinedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnParticipantLeft: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoParticipantObj = objects[response.VidyoParticipant.objId];
			delete objects[response.VidyoParticipant.objId];
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnParticipantLeft)
				VidyoRoomObj.VidyoRoomOnParticipantLeft(VidyoParticipantObj);
			return GetRequest("VidyoRoomOnParticipantLeftComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnRoomPropertiesChanged: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var VidyoRoomPropertiesObj = (response.VidyoRoomProperties) ? response.VidyoRoomProperties : null;
			if (VidyoRoomPropertiesObj && VidyoRoomPropertiesObj.VidyoRoomOnRoomPropertiesChanged)
				VidyoRoomPropertiesObj.VidyoRoomOnRoomPropertiesChanged(VidyoRoomPropertiesObj);
			return GetRequest("VidyoRoomOnRoomPropertiesChangedComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnSetFavoriteResult: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var isFavoriteObj = response.isFavorite;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetFavoriteResult)
				VidyoRoomObj.VidyoRoomOnSetFavoriteResult(isFavoriteObj,resultObj);
			return GetRequest("VidyoRoomOnSetFavoriteResultComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnSetRoomPropertiesResult: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var resultObj = response.result;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetRoomPropertiesResult)
				VidyoRoomObj.VidyoRoomOnSetRoomPropertiesResult(resultObj);
			return GetRequest("VidyoRoomOnSetRoomPropertiesResultComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoRoomOnSetSubject: function(response) {
			var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
			var subjectObj = response.subject;
			if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetSubject)
				VidyoRoomObj.VidyoRoomOnSetSubject(subjectObj);
			return GetRequest("VidyoRoomOnSetSubjectComplete?" + VCUtils.jQuery.param({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnCallCreated: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? new this.VidyoCall(null) : null;
			if(response.VidyoCall){
				VCUtils.jQuery.extend(VidyoCallObj, response.VidyoCall);
				objects[VidyoCallObj.objId] = VidyoCallObj;
			}
			var resultObj = response.result;
			var createTokenObj = response.createToken;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnCallCreated)
				VidyoUserObj.VidyoUserOnCallCreated(VidyoCallObj,resultObj,createTokenObj);
			return GetRequest("VidyoUserOnCallCreatedComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnCallCreatedByInvite: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoCallObj = (response.VidyoCall) ? new this.VidyoCall(null) : null;
			if(response.VidyoCall){
				VCUtils.jQuery.extend(VidyoCallObj, response.VidyoCall);
				objects[VidyoCallObj.objId] = VidyoCallObj;
			}
			var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnCallCreatedByInvite)
				VidyoUserObj.VidyoUserOnCallCreatedByInvite(VidyoCallObj,VidyoContactObj);
			return GetRequest("VidyoUserOnCallCreatedByInviteComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnConnectionStatusChanged: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var reasonObj = response.reason;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnConnectionStatusChanged)
				VidyoUserObj.VidyoUserOnConnectionStatusChanged(reasonObj);
			return GetRequest("VidyoUserOnConnectionStatusChangedComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnFavoriteRoomResults: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var searchResultObj = response.searchResult;
			var roomInfoObj = response.roomInfo;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnFavoriteRoomResults)
				VidyoUserObj.VidyoUserOnFavoriteRoomResults(searchResultObj,roomInfoObj);
			return GetRequest("VidyoUserOnFavoriteRoomResultsComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnGetContactResult: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
			var resultObj = response.result;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetContactResult)
				VidyoUserObj.VidyoUserOnGetContactResult(VidyoContactObj,resultObj);
			return GetRequest("VidyoUserOnGetContactResultComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnGetLicenseKey: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var licenseKeyObj = response.licenseKey;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetLicenseKey)
				VidyoUserObj.VidyoUserOnGetLicenseKey(licenseKeyObj);
			return GetRequest("VidyoUserOnGetLicenseKeyComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnGetWebProxyCredentials: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var webProxyAddressObj = response.webProxyAddress;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetWebProxyCredentials)
				VidyoUserObj.VidyoUserOnGetWebProxyCredentials(webProxyAddressObj);
			return GetRequest("VidyoUserOnGetWebProxyCredentialsComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnLicenseReceived: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var licenseKeyObj = response.licenseKey;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnLicenseReceived)
				VidyoUserObj.VidyoUserOnLicenseReceived(licenseKeyObj);
			return GetRequest("VidyoUserOnLicenseReceivedComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnLoggedOut: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var reasonObj = response.reason;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnLoggedOut)
				VidyoUserObj.VidyoUserOnLoggedOut(reasonObj);
			return GetRequest("VidyoUserOnLoggedOutComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnLoginComplete: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var resultObj = response.result;
			var secureObj = response.secure;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnLoginComplete)
				VidyoUserObj.VidyoUserOnLoginComplete(resultObj,secureObj);
			return GetRequest("VidyoUserOnLoginCompleteComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnRecentRoomResults: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var searchResultObj = response.searchResult;
			var roomInfoObj = response.roomInfo;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnRecentRoomResults)
				VidyoUserObj.VidyoUserOnRecentRoomResults(searchResultObj,roomInfoObj);
			return GetRequest("VidyoUserOnRecentRoomResultsComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnRemoveRosterContact: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var uriObj = response.uri;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnRemoveRosterContact)
				VidyoUserObj.VidyoUserOnRemoveRosterContact(uriObj);
			return GetRequest("VidyoUserOnRemoveRosterContactComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnRoomCreated: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? new this.VidyoRoom(null) : null;
			if(response.VidyoRoom){
				VCUtils.jQuery.extend(VidyoRoomObj, response.VidyoRoom);
				objects[VidyoRoomObj.objId] = VidyoRoomObj;
			}
			var resultObj = response.result;
			var createTokenObj = response.createToken;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomCreated)
				VidyoUserObj.VidyoUserOnRoomCreated(VidyoRoomObj,resultObj,createTokenObj);
			return GetRequest("VidyoUserOnRoomCreatedComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnRoomCreatedByInvite: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoRoomObj = (response.VidyoRoom) ? new this.VidyoRoom(null) : null;
			if(response.VidyoRoom){
				VCUtils.jQuery.extend(VidyoRoomObj, response.VidyoRoom);
				objects[VidyoRoomObj.objId] = VidyoRoomObj;
			}
			var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
			var messageObj = response.message;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomCreatedByInvite)
				VidyoUserObj.VidyoUserOnRoomCreatedByInvite(VidyoRoomObj,VidyoContactObj,messageObj);
			return GetRequest("VidyoUserOnRoomCreatedByInviteComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnRoomSearchResults: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var searchTextObj = response.searchText;
			var searchResultObj = response.searchResult;
			var roomInfoObj = response.roomInfo;
			var numRecordsObj = response.numRecords;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomSearchResults)
				VidyoUserObj.VidyoUserOnRoomSearchResults(searchTextObj,searchResultObj,roomInfoObj,numRecordsObj);
			return GetRequest("VidyoUserOnRoomSearchResultsComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnTokenReceived: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var tokenObj = response.token;
			var tokenTypeObj = response.tokenType;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnTokenReceived)
				VidyoUserObj.VidyoUserOnTokenReceived(tokenObj,tokenTypeObj);
			return GetRequest("VidyoUserOnTokenReceivedComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnUpdateRosterContact: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnUpdateRosterContact)
				VidyoUserObj.VidyoUserOnUpdateRosterContact(VidyoContactObj);
			return GetRequest("VidyoUserOnUpdateRosterContactComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnUpdateSelf: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnUpdateSelf)
				VidyoUserObj.VidyoUserOnUpdateSelf(VidyoContactObj);
			return GetRequest("VidyoUserOnUpdateSelfComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoUserOnUserSearchResults: function(response) {
			var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
			var searchTextObj = response.searchText;
			var searchResultObj = response.searchResult;
			var contactsObj = response.contacts;
			var numRecordsObj = response.numRecords;
			if (VidyoUserObj && VidyoUserObj.VidyoUserOnUserSearchResults)
				VidyoUserObj.VidyoUserOnUserSearchResults(searchTextObj,searchResultObj,contactsObj,numRecordsObj);
			return GetRequest("VidyoUserOnUserSearchResultsComplete?" + VCUtils.jQuery.param({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
		},
		VidyoMeetingFeedbackMeetingAttendeeAdded: function(response) {
			var VidyoMeetingFeedbackObj = (response.VidyoMeetingFeedback) ? objects[response.VidyoMeetingFeedback.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
			var VidyoMeetingAttendeeObj = (response.VidyoMeetingAttendee) ? response.VidyoMeetingAttendee : null;
			if (VidyoMeetingFeedbackObj && VidyoMeetingFeedbackObj.VidyoMeetingFeedbackMeetingAttendeeAdded)
				VidyoMeetingFeedbackObj.VidyoMeetingFeedbackMeetingAttendeeAdded(VidyoMeetingObj,VidyoMeetingAttendeeObj);
			return GetRequest("VidyoMeetingFeedbackMeetingAttendeeAddedComplete?" + VCUtils.jQuery.param({ f: response.VidyoMeetingFeedback ? response.VidyoMeetingFeedback.objId : 0, meeting: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
		VidyoMeetingFeedbackMeetingAttendeeRemoved: function(response) {
			var VidyoMeetingFeedbackObj = (response.VidyoMeetingFeedback) ? objects[response.VidyoMeetingFeedback.objId] : null;
			var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
			var VidyoMeetingAttendeeObj = (response.VidyoMeetingAttendee) ? response.VidyoMeetingAttendee : null;
			if (VidyoMeetingFeedbackObj && VidyoMeetingFeedbackObj.VidyoMeetingFeedbackMeetingAttendeeRemoved)
				VidyoMeetingFeedbackObj.VidyoMeetingFeedbackMeetingAttendeeRemoved(VidyoMeetingObj,VidyoMeetingAttendeeObj);
			return GetRequest("VidyoMeetingFeedbackMeetingAttendeeRemovedComplete?" + VCUtils.jQuery.param({ f: response.VidyoMeetingFeedback ? response.VidyoMeetingFeedback.objId : 0, meeting: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
		},
	};

	this.GetVersion = function() {
		var data = GetRequest("GetVersion");
		if(data)
			return data.version;
		return null;
	}
	function ReceiveFeedbacks(contextObj, response){
		if (response && response.result == "ok") {
			for (var feedbackId in response.data) {
				var feedback = response.data[feedbackId];
				callbacks[feedback.callback].call(contextObj, feedback);
			}
		}
	}
	function GetRequest(request, asyncSuccess, asyncFailure) {
		try {
			if(typeof(asyncSuccess) === 'undefined')
				response = transport.SendMessage(request);
			else
				response = transport.SendMessage(request, asyncSuccess, asyncFailure, true);
		} catch(err) {
			return undefined;
		}
		if (response && response.result == "ok"){
			if(response.data)
				return response.data;
			else
				return true;
		} else {
			return undefined;
		}
	}
	function UpdateViewOnDOM(uiEvent, viewId, x, y, w, h) {
		return transport.UpdateViewOnDOM(uiEvent, viewId, x, y, w, h);
	}
	var objects = new Object();
	var onStatus = onStatus;
	var transport = new VidyoClientTransport(this, onStatus, ReceiveFeedbacks, plugInDivId);
}

